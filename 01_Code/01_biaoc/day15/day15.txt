结构体变量可以作为函数的形式参数使用，但是
    这样会造成时间和空间的浪费
采用结构体指针作为形式参数可以避免这种浪费
采用结构体指针作为形式参数时被调用函数如果
     修改了结构体内容就会影响到调用函数

练习：
    1.编写程序从键盘得到一个点的位置，然后
	   在一个函数里把这个点的位置再次打印
	   在屏幕上

结构体可以作为函数的返回值使用，但是这时
    同样会造成时间和空间的浪费
使用结构体指针作为函数的返回值可以避免这种
    浪费
不要把局部结构体变量的地址赋值给结构体指针
    类型的返回值

练习：
    1.编写函数根据两个点的位置计算中间点
	    的位置，在主函数中把计算结果打印
		在屏幕上

内存中所有存储区的地址一定是它自身大小的
    整数倍（double类型存储区的地址只需要是
	4的整数倍就可以了）
这个规则叫做数据对齐
结构体内部的每个存储区一般也需要遵守数据
    对齐的规则
数据对齐规则会导致结构体内部各部分之间存在
    空隙，结构体的大小可能大于各部分大小
	之和
一个结构体存储区的大小一定是它内部包含的
    占地最大的基本类型存储区大小的整数倍
	（double类型大小按照4计算）
这个规则叫做数据补齐
数据补齐可能造成结构体存储区最后多出一些
    浪费的字节

枚举类型也是一种创建新数据类型的方法
枚举类型也需要先声明然后才能使用
声明枚举类型的时候需要使用enum关键字
枚举类型中可以包含有限个数字，每个数字可以
    用一个名字表示
枚举类型中第一个名字代表的数字是0,向后
    依次类推
可以在声明枚举类型的时候指定某个名字所代表
    的数字，后面的每个名字所代表的数字都
	会随之变化

联合也可以用来声明新的数据类型
声明联合的时候需要使用union关键字
联合里每部分的开始地址都一样
联合里每部分的存储区是重叠的,修改了任何
    一个部分的内容则其他部分会受影响
联合的大小是其中最大子部分的大小

动态分配内存指的是在程序运行的时候临时
    决定分配的内存大小
需要使用一组标准函数实现对动态内存的管理
为了使用这些标准函数需要包含stdlib.h头文件

malloc标准函数可以动态分配指定数量的字节
这个函数需要一个参数表示字节个数
这个函数的返回值是分配好的第一个字节的地址
这个函数有可能失败，如果失败则返回值是NULL
返回值如果是有效地址就必须长期保存
返回值的类型是无类型指针，必须首先进行
    强制类型转换然后才可以使用

当动态分配内存不再使用的时候必须把它还给
    计算机
free标准函数用来把动态分配内存还给计算机
这个函数需要第一个字节的地址作为参数
一段动态分配的内存只能释放一次
一起分配的内存必须一起释放
如果使用指针作为参数调用free函数则函数结束
    后指针将成为野指针

可以在被调用函数里把动态分配内存的首地址赋值
    给指针类型的返回值
利用这种方法可以让调用函数使用被调用函数
    分配的内存
这种时候动态内存由被调用函数分配但是由调用
    函数释放

练习：
    1.编写函数计算两个点的中间位置，在
	    主函数中把计算结果打印在屏幕上
		(使用动态分配内存记录新的位置)

采用二级指针作为形式参数也可以把被调用函数
    动态分配的存储区传递给调用函数

练习：
    1.把刚才计算中点位置的函数改成使用
	    二级指针形式参数

预习
    1.动态内存分配
	2.函数指针
	3.C语言一些其他的标准函数

作业：
    1.编写函数生成一张彩票在主函数中打印
	    彩票里的所有数字
		（彩票数字要求记录在动态分配内存里）




