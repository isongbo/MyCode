画图总结二进制知识

无符号类型的二进制都是非负数
有符号类型的二进制最左边的数位决定了它的
    符号（0表示非负数，1表示负数）
有符号类型的这个数位叫做它的符号位
不能把符号位等同于符号

同样的二进制内容按照有符号解释是一个数字，
    按照无符号类型解释就可能是另外一个数字

当把占地大的整数类型数据赋值给占地小的
   整数类型存储区时只会保留部分二进制数位
当把占地小的有符号类型整数数据赋值给占地
    大的有符号整数类型存储区时扩充出来
	的二进制填充的全是符号位

C语言中使用大量的操作符对数字进行各种处理

C语言里可以使用加减乘除四则运算符号（
   +,-,*和/表示）
如果参与除法计算的两个数字都是整数则计算
    结果也只保留整数部分

%是一个操作符，它用来表示取余操作

,也是一个操作符，它可以把两个能当做数字使用
    的内容合并成一个表达式
用,连接起来的内容可以作为数字使用，这个数字
    就是,后面的那个数字
,操作符的优先级非常低

赋值操作符用=表示，它可以把右面的数字放到
    左面的存储区里
赋值操作符要求左边的内容可以代表一个
    存储区(左值)
右边的内容必须可以代表一个数字
赋值操作符的优先级非常低，但是比,操作符高
用赋值操作符编写的表达式本身可以当做数字使用，
    这个数字就是赋值完成后左边存储区里的数字
可以在一条语句中使用多个赋值操作符，先计算
    右边的操作符然后再计算左边的操作符

需要一个数字配合使用的操作符叫单目操作符
需要两个数字配合使用的操作符叫双目操作符
需要三个数字配合使用的操作符叫三目操作符

大多数双目操作符可以和赋值操作符合并形成
    复合赋值操作符，例如+=,%=等
复合赋值操作符也是双目操作符，它也要求
    左边是一个可以代表存储区的内容，右边
	是一个可以当数字使用的内容
复合赋值操作符把左右两边的内容先进行计算
    然后把计算结果记录在左边的存储区里
所有复合赋值操作符的优先级都和赋值操作符
    的优先级一样低

自增操作符(++)和自减操作符（--）可以用来
    对一个存储区的内容做加一或者减一操作
这两个操作符都是单目操作符
这两个操作符必须和存储区配合使用
每个操作符都有两种使用方式，分别是前操作和
    后操作(前操作指操作符写在存储区前面，后
	操作指操作符写在存储区后面)
可以把自增或自减操作符和存储区当做一个数字
    使用，前操作的时候这个数字是操作完成
	后的数字，后操作的时候这个数字是操作之前
	的数字
不要在一条语句中对同一个变量多次进行自增
    或自减计算，因为计算规则不确定

布尔类型只包含两个数字，它们分别叫做真(TRUE)
    和假(FALSE)
布尔类型数值在计算机里也是用整数表示的，
    真用整数1表示，假用整数0表示
计算机里任何一个整数也可以当做布尔值使用，
    整数0当布尔值使用的时候是假，其他整数
	当布尔值使用的时候都是真

逻辑操作符代表对数字的某种计算规则，这些计算
     的结果必须是布尔值
!是一个单目逻辑操作符，它可以把真变成假，把
     假变成真。把它叫做求反操作符。
这个操作符应该写在一个布尔值的前面	

双目逻辑操作符包括==(等于),!=(不等于),>(大于)
	<（小于），>=(大于等于)和<=(小于等于)

最多只包含一个双目逻辑操作符的表达式叫做
    简单逻辑表达式

C语言中的所有逻辑表达式都是由一个或者多个
    简单逻辑表达式合并构成的

与(&&)和或(||)也是双目逻辑操作符，它们可以
    用来把两个逻辑表达式合并成一个复杂逻辑
	表达式
如果使用与(&&)连接逻辑表达式A和B，则只有
    当A和B的结果都是真的时候合并后的结果
	才是真，否则就是假
如果使用或(||)连接逻辑表达式A和B，则只要
    其中有一个的结果是真则合并后的结果
	就是真，否则才是假

与(&&)和或(||)都具有短路特征，如果前一个
    表达式的结果可以决定合并后的结果则
	计算机忽略后一个逻辑表达式

算数操作符的优先级比双目逻辑操作符的优先级
    高

位操作符直接操作二进制数位

~是一个单目位操作符，它可以把一个数字的
    所有二进制数位求反，所以叫做按位求反
	操作符
这个操作符应该写在一个数字的前面

双目位操作符包括按位与(&),按位或(|)和
    按位异或(^)
双目位操作符首先把参与计算的两个数字转换
    成二进制，然后用对应数位上的数字进行
	计算

按位与把对应数位上的数字进行与计算
    0   &   0          0
    1   &   1          1
	1   &   0          0

    3         0000 0011
&   5         0000 0101
              0000 0001

按位与可以把某些二进制数位上的数字变成0
任何数位和0做按位与结果一定是0
任何数位和1做按位与结果不变

按位或把两个数字对应数位上的内容做或计算
   0   |   0        0
   1   |   1        1
   1   |   0        1

   3        0000 0011
|  5        0000 0101
            0000 0111

按位或可以把某个二进制数位上的内容变成1
任何数位和1做按位或结果是1
任何数位和0做按位或结果不变

按位异或把对应数位上的数字进行异或计算
    0   ^   0       0
	1   ^   1       0
	1   ^   0       1

    3     0000 0011
^   5     0000 0101
          0000 0110

按位以后可以把某些二进制数位上的内容求反
任何二进制数位和1做按位异或结果变成相反数
任何二进制数位和0做按位异或结果不变

移位操作也是双目位操作符，用符号(>>)或者
    (<<)表示
它可以把一个数字中所有二进制数位统一向左
    或者向右移动n个位置
>>表示向右移动
<<表示向左移动
它们要求左右两边各写一个数字，左边的数位
    是将要进行移位操作的数字，右边的数字
	是移动的位数
移位操作不会修改任何存储区的内容

在移位操作过程中一定会有一些空位置出现，
    这些空位置里必须填充数字

如果向左移动则右边的空位置上一定填充0
向右移动时空位置出现在左边，这些位置上
   填充的内容要根据数据的类型决定
如果数据是无符号类型则填充的一定是0
如果数据是有符号类型则填充的都是符号位的
    数值

如果移动过程中没有出现有效数据丢失则向左
    移动n位相当于乘以2的n次方，向右移动
	n位相当于除以2的n次方

预习：
    1.地址操作符，三目操作符
	2.数据类型转换
	3.分支（if分支，switch...case分支）
    4.循环（for循环）

作业：
    1.编写程序判断用户给定的年份是不是闰年，
	     如果是闰年在屏幕上打印1,不是闰年
		 在屏幕上打印0
       如果一个年份可以被4整除但是不能被
	   100整除则这个年份是闰年
	   如果一个年份可以被400整除则它也是
	   闰年



