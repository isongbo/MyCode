假设有如下的for循环语句
for (1;2;3) {
	4
}
它按照如下方式分组执行
[1,2][4,3,2][4,3,2]...[4,3,2]
第一组和其他组都不一样
如果一个循环没有采用break;语句结束则它
    应该是在两组之间结束
如果某一组中编号为2的逻辑表达式结果是假
    则结束整个循环
for循环大括号里面的语句有可能不执行

复杂的循环问题可以采用循环嵌套格式解决
循环嵌套由两个循环构成，一个包含另一个
可以认为内部的循环每次解决一组问题，外部
    循环负责解决多组问题
在采用循环嵌套结构解决问题的时候要采用如下
    步骤
1.首先对问题进行分组并为每一组找到一个代表
    数字
2.编写循环，在这个循环里循环变量依次代表每组
    的代表数字。这个循环就是循环嵌套的外循环
3.在外循环内部编写循环解决每组的问题

演示循环嵌套的编写

练习：
    1.假设有一种货币其中包含三种面值，分别
	    是1元，2元和5元
	  编写程序把这种货币表示10元的所有可能性
	  打印在屏幕上

内循环和外循环使用两个不同的循环变量
内循环的开始数字和结束数字往往需要根据外
    循环的循环变量计算得到

for循环的其他编写方式
1.如果循环大括号里只有一条语句则可以省略
    大括号
2.小括号中第一段和最后一段里都可以使用逗号
	操作符把多个无关操作连接成一条语句
3.可以在小括号里临时定义循环变量(C99规范
	里才支持,循环结束后临时定义的循环变量
	就不能用了)
4.可以在小括号里只保留逻辑表达式
5.如果大括号里没有任何语句则可以省略大括号
    并且在小括号后面直接使用分号结束
6.可以省略小括号里的逻辑表达式，这个时候
    计算机认为逻辑表达式的结果永远是真。
	这种循环不能正常结束，叫做死循环。

while关键字也可以用来编写循环
如果编写程序的时候不知道循环要执行多少次
    则适合采用while关键字编写
while循环的格式如下
while (逻辑表达式) {
	反复执行的语句
}
当逻辑表达式的结果是真就反复执行大括号里的
    语句，为假就结束循环

while循环演示

练习：
    1.从键盘得到一个整数，统计这个整数
	   中数字位数的个数并把统计结果打印
	   在屏幕上

假设有如下while循环
while (1) {
	2
}
它按照如下方式分组执行
[1][2,1][2,1]....[2,1]
第一组和后面所有组都不一样
每组最后的步骤都是编号为1的逻辑表达式，当
    某组中逻辑表达式的结果为真是启动下一组，
	为假是结束循环
while循环大括号里的语句有可能不执行

while关键字也可以用来编写空语句循环和死循环
while关键字编写的死循环通常是如下的样子
while (1) {
	....
}

while循环中也可以使用break和continue语句，
    它们的作用和在for循环里一样

do...while关键字也可以用来编写循环
使用这种方式编写的循环可以保证大括号里的
    语句至少执行一次
这种循环的格式如下
do {
	2
} while (1);
注意在小括号后面必须使用分号把它结束
它按照如下方式分组执行
[2,1][2,1][2,1]...[2,1]
相当于把while循环中第一组丢掉

goto也是一个流程控制语句
它可以把程序中任意一条语句指定成下一条语句
这个语句非常危险，容易导致程序出现严重错误，
    所以不应该使用

无法预测的数字叫做随机数
计算机只能生成伪随机数

rand标准函数可以用来获得伪随机数
为了使用这个标准函数需要包含stdlib.h文件
编写函数调用语句并把这个语句直接当做数字
    使用就是得到的伪随机数
如果多次使用函数调用语句得到数据则它们都是
    不同的

srand标准函数可以用来设置随机数种子(相当于
	种一颗苹果树)
为了使用这个标准函数也需要包含stdlib.h文件
这个函数调用语句的小括号里需要写一个整数，
    这个整数就是随机数种子（苹果树种子）
不同的随机数种子可以得到不同的苹果树
不要在同一个程序里多次设置随机数种子，把
    srand标准函数的调用语句写在主函数的
	开头就可以保证这一点

可以采用当前时间作为种子，这样可以保证
    多次运行程序的时候它们使用的是不同
	的随机数种子
time标准函数可以用来获得当前时间
为了使用这个标准函数需要包含time.h文件
编写time函数调用语句在小括号里写一个数字0
    然后把函数调用语句直接当做数字使用就是
	得到的时间

数组用来代表内存中一组连续的同类型存储区
数组也需要先声明然后才能使用
声明数组时除了要提供类型名称和数组名称以外
    还需要提供数组中存储区的个数
一个数组一旦被创建则里面包含的存储区个数
    不可以改变
数组不能作为整体使用，一次只能使用其中的
    某一个存储区
数组中每个存储区有一个编号，这些编号从0开始
    向后依次类推
这个编号叫做数组的下标
下标是表示数组中某个存储区的唯一办法
下标的范围从0开始到个数减一为止，超过
    范围的下标绝对不可以使用

为了按顺序依次处理数组中每个存储区需要编写
    一个for循环，让循环变量依次代表数组中
	每个存储区的下标。在循环的大括号里编写
	语句对数组中某个存储区做处理就可以把
	数组中所有存储区进行类似的处理。

练习：
    1.从键盘得到一个非负整数，把它的每个
	    数位单独打印在屏幕上（不同数字
		之间使用空格分隔）

只有处理方式类似的数据才有必要记录在
    一个数组中

声明数组的时候也应该进行初始化
1.用一对大括号把所有初始化数据包含起来，
    不同数据之间使用逗号分开
2.所有初始化数据从前到后使用（第一个初始化
    数据用来初始化第一个存储区，向后
	依次类推）
3.如果初始化数据多于存储区个数则多余的
    数据被丢弃
4.如果初始化数据少于存储区个数则后面的
    存储区自动被初始化成0
5.如果初始化数据个数和存储区个数一样则
    可以省略数组声明中存储区的个数

预习：
    1.数组的其他内容（二维数组）
    2.练习

作业：
    1.编写程序在屏幕上打印九九乘法表
	格式如下
	1X1= 1
	2X1= 2 2X2= 4
	3X1= 3 3X2= 6 3X3= 9
	.....
    2.把身份证中前17个数字分别和下面17个
	   数字相乘
	   (7, 9, 10, 5, 8, 4, 2, 1, 6, 3,
		7, 9, 10, 5, 8, 4, 2)
      把所有乘法结果相加，然后用求和结果
	  除以11取余，用这个余数作为编号从下面
	  11个数字中挑出对应的数字
	  (1, 0, X, 9, 8, 7, 6, 5, 4, 3, 2)
	  这个挑出来的数字就是身份证最后一位
	  的数字






