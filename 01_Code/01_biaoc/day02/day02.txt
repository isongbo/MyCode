vi可以用来在Linux系统中记录文字信息

vi只能在终端窗口里使用

vi的功能分成三组，任何时候只能使用其中一组
vi中有三个工作模式，每个工作模式对应一组功能
三个工作模式分别是正常模式，插入模式和命令
    模式

正常模式下可以执行一些简单命令
插入模式下可以修改文字内容
命令模式下可以执行复杂命令

每次刚打开vi的时候一定处于正常模式下

不同工作模式之间可以互相转换
正常模式下可以输入i转换成插入模式
正常模式下输入:转换成命令模式
在任何情况下输入esc键可以转换成正常模式

可以使用如下命令启动vi
vi 文件路径

可以采用如下两种方法结束vi
1在命令模式下输入q!可以结束vi,这种结束方式
    不会保留修改内容
2在命令模式下输入wq或者x也可以结束vi，这种
    结束方式会首先保存所有修改然后结束

在命令模式下输入w可以保存所有修改而不退出
    vi

在正常模式下输入nyy命令(n代表一个整数，如果
    是1可以省略)可以把光标所在行开始的连续
    n行拷贝到剪贴板上

在正常模式下输入np命令(n代表一个整数，如果
	是1可以省略)把剪贴板上的内容在当前光标
    所在行下面连续粘贴n次

在正常模式下输入ndd命令(n代表一个整数，如果
	是1可以省略)可以把当前光标所在行开始的
    连续n行剪切到剪贴板上

可以在命令模式下使用set命令对vi做各种设置

可以使用set nu命令设置vi显示每行的行号

可以把很多set命令记录在~/.vimrc文件里，每次
    vi启动的时候都会把这个文件里的所有命令
	按顺序执行一遍

文件的操作属性决定可以如何使用这个文件
文件的操作属性由九个英文字母构成
操作属性分成三组，每组中包含三个英文字母
每组中第一个字母表示是否可以查看文件内容，
    如果可以查看则字母是r，如果不能查看则
	字母是-
每组中第二个字母表示是否可以修改文件内容，
    如果可以修改则字母是w，如果不能修改则
	字母是-
每组中第三个字母表示是否可以执行文件，如果
    可以执行则字母是x，如果不能执行则字母
	是-
第一组操作属性针对文件的所用者
第二组操作属性针对同组人
第三组操作属性针对其他人

可以把每组中的三个字母转换成一个数字，
    字母r转换成4,字母w转换成2,字母x转换
	成1,字母-转换成0

chmod命令可以用来修改文件的操作属性
命令使用方法如下
chmod 664 文件路径
664代表用数字表示的新操作属性

文件是否可以执行不仅仅取决于操作属性还取决于
    文件内容
如果一个文件中包含的全是各种命令则它是可以
    执行的,它的执行结果相当于把里面的所有
	命令按顺序执行一遍
符合这种特征的文件叫脚本文件
使用脚本文件可以把一些繁琐的工作自动化

cp命令可以用来实现文件的拷贝
使用方法如下
cp  原文件路径   新文件路径

mv命令可以把一个文件转移到另外一个位置
使用方法和cp命令一致

链接文件可以用来代表另外一个文件
链接文件和原文件共用同样的内容
可以使用ln命令创建链接文件
ln命令的使用方法和cp,mv一样
使用上述方法创建的链接文件叫硬链接文件，
    即使原文件不存在了硬链接文件仍然可以
	使用

在ln命令中加上-s选项就可以创建软链接文件
如果原文件不存在了则软链接文件就无法使用了

运行程序的时候计算机会从文件中得到数据并
    在内存中创建一组新数据，用户真正使用
	的是这组新数据
这组新数据叫做进程
进程中包含的数据会随着时间发生变化
进程概念同样包含了数据的变化规律

计算机为每个进程分配一个整数，这个整数
    叫做这个进程的ID
不同进程的ID一定不同
计算机通过进程ID管理进程

ps命令可以用来查看终端窗口里的所有进程
使用-aux选项可以查看计算机里的所有进程

使用kill命令可以结束一个进程
使用方法是在命令中提供进程ID
如果单单使用kill命令无法结束一个进程的话
    可以在命令中加-9选项
如果进程占住终端窗口不允许输入命令则可以
    使用ctrl加c的组合键结束它

输出重定向可以把命令本应该显示在窗口里的
    内容记录到文件中
只要在命令后使用>然后再加上文件路径就可以
    实现输出重定向
如果路径对应的文件存在则里面的内容会被
    删除
也可以使用>>实现输出重定向，这样就会保留
    文件中原有内容

使用通配符编写的路径可以同时代表多个已经
    存在的文件或文件夹
?是一个通配符，它可以用来代表任何单个字符
*也是一个通配符，它可以用来代表任意多个
    任意字符

C语言程序的绝大部分应该记录在以.c作为扩展名
    的文件里，这种文件叫C语言源文件

C语言程序中可以直接使用数字和加减乘除符号
    （+,-,*,/）
C语言中每个处理步骤最后都应该使用;结束
每个使用;结束的处理步骤叫做一条语句

C语言规定绝大多数语句应该写在一对大括号里面

C语言程序中的大括号可以用来代表函数（函数
    包含一组语句）

C语言程序中必须有函数(可以是一个也可以是
	多个)

每个函数有自己的名字，不同函数的名字必须
    不一样

C语言程序中必须有一个叫做main的函数，这个
    函数叫做主函数

程序从主函数的第一条语句开始执行
当主函数的最后一条语句结束的时候程序结束

C语言允许一个函数在结束的时候遗留一个
    数字，这个数字叫做这个函数的返回值

主函数在结束的时候应该指定一个数字作为
    返回值，这个数字用来表示主函数是否
	正常运行。数字0表示一切正常，其他数字
	表示遇到了问题。

C语言中预留几十个英文单词，这些单词叫做
    关键字。每个关键字有特定的用途，不能
	随便使用。
return就是一个关键字，这个关键字有两个用途。
    主要用途是结束函数的执行，辅助用途
	是指定函数的返回值。

C语言根据数字在某个方面的区别把它们分成
    几组，每组叫做一个数据类型。
每个数据类型都有自己的名字
整数是一种数据类型，它里面包含了几乎所有
    不带小数点的数字
整数类型的名称是int

如果一个函数有返回值的话则应该把返回值数字
    的类型名称写在函数名称前

C语言程序开发基本过程
1.使用vi编写以.c作为扩展名的源文件
2.使用gcc编译器把源文件内容翻译成计算机
    能认识的格式(编译)
3.使用./a.out作为命令执行得到的文件

gVim是Windows里的vi
MinGW是Windows里的gcc

C语言程序中通常需要包含预处理指令
预处理指令都是以#做开头，不是以;作为结尾
标准C阶段遇到的预处理指令都可以把源文件的
    内容修改成其他内容
#include是一个预处理指令，它可以把其他文件
	的内容包含在当前源文件里
这个预处理指令中需要使用相对路径表示出其他
    文件的位置
把相对路径包含在一对尖括号里表示把系统中
    预先规定好的一组目录依次作为起点查找
	目标文件
把相对路径包含在一对""里表示首先把源文件所在
    目录作为起点查找目标文件，如果没有找到
	再把系统中预先规定好的一组目录依次作为
	起点继续查找

gcc编译器工作过程
1.首先处理源文件里所有预处理指令
2.把第一步的结果翻译成计算机认识的格式
     （编译）
3.把翻译后的不同部分合并在一起（链接）

gcc选项介绍
-E       这个选项只处理所有的预处理指令
-c       这个选项只完成预处理指令的处理
          和翻译工作
         这个选项会得到以.o作为扩展名的
		 文件，这种文件叫目标文件
-o       这个选项会完成所有处理工作，
          这个选项后可以写一个名字，这个
		  名字将作为得到的新文件的名字
-std=c89/-std=c99
         这个选项可以决定采用什么版本
		  进行编译
         如果没有使用这个选项则默认采用
		  c89版本

可以在程序中加入文字信息，但是文字信息
    必须加入到注释区域里
计算机会自动忽略注释区域里的内容
一种注释叫单行注释，它以//作为开头，到
    行尾为止
另外一种注释叫多行注释，它以/*做开头，
    以*/作为结尾

C语言程序中需要大量使用名称，这些名称
    叫标识符
最好使用英文单词作为标识符
标识符编写规则
1.第一个字符可以是英文字母或者下划线
2.后面的字符可以是英文字母，下划线或者
      阿拉伯数字字符
3.大小写不同的标识符是不同的标识符（
    大小写敏感）
4.关键字不可以作为标识符使用
5.标识符的长度没有限制(如果长度过长则计算机
	只会截取前面一部分使用，c89规范里截取
	前31个字符，c99规范里截取前63个字符)

C语言程序书写规范
1.一行中最多包含一条语句
2.同级别的语句最左边一列应该上下对齐
3.在合适的地方使用空格和空行提高程序的
    可读性
4.标识符采用驼峰方式或下划线方式书写

预习：
    1.printf标准函数
	2.变量
	3.scanf标准函数

作业：
    1.抄写box.c文件
    2.假设有1克到127克之间127个不同的整数
	     重量，要求设计一组砝码可以表示
		 其中任何一个整数重量
         (几个砝码重量之和等于某个重量叫做
		  用砝码表示这个重量
		  砝码的重量不能重复
		  砝码的数量越少越好)




