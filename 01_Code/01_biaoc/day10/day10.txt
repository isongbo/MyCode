每个存储区都是有主人的
存储区的主人一定是某一组语句的一次执行
    过程
存储区的主人只能在某个时间范围内存在
只有存储区的主人存在的时间范围内存储区才是
    可以使用的
这个时间范围叫做存储区的生命周期
只有存储区的主人所包含的语句才可以使用存储区
    对应的变量
这些语句叫做这个存储区的作用域
作用域之外的语句不可以使用存储区对应的变量，
    但是也许可以使用存储区本身

如果一个变量声明在所有大括号的外边，这种
    变量叫做全局变量
全局变量的主人是程序中所有语句的一次执行
    过程
全局变量的声明周期是整个程序的执行时间范围
全局变量的作用域是整个程序中的所有语句
没有初始化的全局变量自动被初始化成0

如果一个变量被声明在一个函数的大括号里则
    它叫做局部变量
局部变量的主人是函数内部的所有语句的一次执行
    过程
局部变量的生命周期是它所在的函数某一次执行
    的时间范围
局部变量的作用域是它所在函数内部的所有语句

函数内部某个大括号里的所有语句叫做一个语句块
声明在语句块里面的变量叫块变量
块变量的主人是语句块的一次执行过程
块变量的生命周期是语句块某次执行的时间范围
块变量的作用域是语句块内部的所有语句

声明变量时尽量选择作用域小的变量种类

在一个程序中不同种类的变量可以重名
如果一条语句中使用了重名变量则计算机会选择
    可用变量中作用域最小的那个

程序在内存中是分段落保存的
代码段           记录程序语句转换得到的
                 数字
				 在程序运行的时候不可以
				 修改
全局段           用来记录主人是整个程序
                 运行过程的所有存储区
                 所包含的字节个数不会随着
				 程序的运行而改变
栈               用来记录局部变量，块变量，
                 形式参数和返回值的存储区
                 所包含的字节个数会随着
				 程序的运行而改变
                 每当一个新函数开始运行这个
				 段落中就会多出一些字节，这
				 些字节组成这个新函数所需要
				 的所有存储区
                 每当一个函数结束执行它所
                 占有的所有字节就被回收了
                 如果函数A在函数B之前开始
				 运行则必须先回收函数B所占
				 有的字节然后才能回收函数
				 A所占有的字节
堆               包含动态分配存储区
                 堆中所能包含的字节个数几乎
				 可以认为是无限的
                 堆里面存储区的生命周期
				 由程序员来管理

声明变量时可以使用的关键字
1.auto关键字用来声明自动变量
    所有局部变量都是自动变量
	不需要使用这个关键字
2.static关键字用来声明静态变量
    全局变量，局部变量和块变量
	都可以变成静态变量
    所有静态变量的主人都是整个
	程序的运行过程(所有静态变量
	的生命周期是整个程序运行期间，
	作用域和非静态变量一致)
    静态全局变量的作用域是声明它
	的那个文件中的所有语句
    没有初始化的静态变量自动被
	初始化成0
    静态变量的初始化只在程序开始执行
	时做一次
3.const关键字可以用来声明不可以赋值的变量
    这种变量只能在初始化的时候向里面放数字
4.volatile关键字可以用来声明多变的变量

指针类型也是一种数据类型，可以用它来声明
    变量
指针类型变量用来记录地址数据
一旦指针中记录了一个有效地址数据就可以根据
    指针找到地址所属的那个存储区
指针变量类似于一个种子文件
指针变量和种子文件的区别
1.指针变量任何时候最多只能帮忙找到另外一个
    存储区
2.指针变量的内容可以改变，在不同的时候指针
    变量可以帮我们找到不同的其他存储区

不同类型存储区的地址适合记录在不同类型的
    指针变量中

演示指针的基本使用

只有捆绑过的指针才可以用来表示另外一个
    存储区

指针变量可以在程序中代表四个不同的内容
1.指针变量名称可以用来代表指针自己的存储区
     或者这个存储区里的地址数据
2.指针变量名称前加*可以用来代表捆绑存储区
     或者捆绑存储区里的数据

NULL叫做空地址，它的数值就是数字0
没有捆绑过的指针必须记录空地址，这种指针
    叫做空指针
因为所有捆绑过的指针一定不会是空指针，所以
    可以把空指针和捆绑过的指针区分开
既没有捆绑过也不是空指针的指针叫做野指针
程序中禁止出现野指针
没有初始化的指针都是野指针，所有指针变量
    都应该初始化
*****指针变量初始化的时候*没有参与赋值
    过程，被赋值的是指针本身的存储区

演示：
    1.从键盘得到三个整数，把其中最大整数
	     打印在屏幕上（使用指针实现）

可以在一条语句中声明多个同类型的指针变量，
    这个时候要在每个指针变量名称前加*

指针变量的内容可以改变，可以让一个指针在
    不同的时候和不同的存储区捆绑

练习：
    1.修改刚才的演示程序(通过修改指针的
		捆绑关系把三个数字按照从大到小的
		顺序打印在屏幕上）

在使用指针的时候往往不知道捆绑存储区的来源，
    而只知道它的某种使用特征

所有类型的指针变量大小一样
在我们的计算机上所有指针变量的大小都是4个字节
不同类型指针之间互相赋值不会导致地址数据
    丢失
通过指针找到的捆绑存储区类型由指针类型决定
可以把一个指针强制转换成其他类型的指针，
   通过转换后的指针得到的捆绑存储区类型也会
   随之改变
利用指针强制类型转换可以把一个类型的存储区
   当做另外一个类型的存储区使用

无类型指针没有表示捆绑存储区的类型
无类型指针用void *表示
这种类型的指针可以和任何存储区捆绑
不可以直接在无类型指针前加*，必须要首先
    强制类型转换成有类型指针然后才可以
	加*
无类型指针可以用来记录来源不明并且类型可能性
    又很多的地址数据

预习：
    1.指针
	2.字符串

作业：
    1.使用指针编写程序交换两个整数变量
	    的内容
    2.把1.0f的二进制内容以十六进制的
	    方式打印在屏幕上






