Unix/Linux系统的C语言开发
 Unix/Linux系统可以支持多个语言,主流的包括：
  C语言(UC)、C++、java
 UC主要讲： 
  Unix/Linux系统的原理和设计
  Unix/Linux系统提供的函数(Linux/Unix专用)
 课程一共是15天：
   UC的课程需要时间才能积累出效果，不是每一天都能写个东西，但综合起来能做更实用的软件。
   内容：
    Unix/Linux 的共享库(重点)和静态库(了解)
    C程序员的错误处理
    Unix/Linux的内存管理
    Unix/Linux的文件管理
    Unix/Linux的目录操作
    Unix/Linux的进程管理
    Unix/Linux的信号处理
    Unix/Linux的进程间通信(IPC)
    综合案例1 
    Unix/Linux的网络编程
    Unix/Linux多线程编程
    综合案例2

  学习的方法
    应试教育的学习方法 - 面试、笔试，最有效的方法就是背 面试题
    技能学习的学习方法 - 掌握一种技能，实践最重要，程序员最重要的实践就是敲代码
    技能学习的方法：
     1 花时间，包括：课上时间和课下时间，课下最好保持3小时，下午5点半下课，到6点15分自习，到9点15分。课下的时间做三件事：
    a 把笔记看一遍，包括细节，过一遍脑子。  
    b 所有的代码敲出来，不借助任何的工具能默出来。
    c 把问题总结出来，及时解决问题。
     2 动手能力的重要性 远超 理论。开发的经验就是动手敲出来的。
     3 每天的问题每天解决，不要 积累问题。

  就业方向和职业发展
    C++程序员 - 技术要求比较高
    UC程序员 - UC+标C(嵌入式方向的同学)
    Windows开发(MFC) - C++方向的同学
    嵌入式软件工程师 - 嵌入式方向的同学
    软件方向 - 底层开发工程师、硬件设备驱动(嵌入式方向)、传统的软件公司、互联网公司、电信系统、通讯系统、银行系统、保险系统、能源系统。
    职业发展道路： 
      初级程序员(3000-5000) - 毕业以后就是，持续1-2年
      高级程序员(5000-15000) - 有1年以上经验，持续3年左右
      系统架构师、系统分析师(8000-25000) - 需要3到5年经验
      项目经理/主管(8000-25000) - 需要3-5年的经验
      管理型的职位，比如部门经理、CTO

   大多数程序员 都应该有 项目奖金。
    想做管理型的职位，学历等硬件指标还是有用。
  
  张立猛 - zhanglm@tarena.com.cn
  C++教学总监，所有C++教学相关的事宜找我
  
  今天：
    标准(规范)、产品和项目
     标准是 行业准则，所有的行业的产品都必须遵守。标准一般都是行业集体制定，也有行业老大制定。最轻松的公司，钱多。
     产品是 以质量为核心的软件，不需要考虑 某些 特殊团体的需求，只需要做好产品本身就可以。比较轻松的公司。
     项目是针对特定客户的软件，受特定客户的限制。比较辛苦，经常加班。

   Linux是类 Unix系统，GNU解决了界面的问题，POSIX规范解决了和Unix系统的兼容性问题，GPL解决了版权问题，加上本身开源免费，因此发展非常的迅速，各种版本也层出不穷。

  编译器GCC
   编程基本上都是使用 高级语言(C、C++、java....)，高级语言计算机无法直接执行，先变成汇编语言，然后汇编语言转成 机器指令，计算机才能执行。
   gcc 在处理代码时，有4个阶段：
   1 预处理，针对所有的指令
   2 编译，狭义上的编译，主要完成一些错误检测
   3 汇编，把 高级语言转成汇编语言
   4 连接，把相关的各种资源都连接进来
  通常情况下所说的编译是 包括1,2,3三个阶段，也就是广义的编译。

   gcc可以用来编译连接代码，生成可执行文件/动态库。gcc的用法：
   gcc -E 把指令(以#开头的)进行预处理，转成纯C语法
   gcc -S 生成汇编文件，生成 .s文件
   gcc -c 只编译，不连接，生成 .o文件
   gcc -o 改变目标文件名
   gcc     编译+连接，生成 a.out
   gcc -Wall 显示更多的警告，可以规范代码

  如果想把预处理的结果存起来，可以用：
   gcc -E hello.c -ohello.i 
  选项的位置比较灵活，可以放在前面或后面(个别情况例外)。

  C语言的指令：
   以#开头的统称为指令，常用的指令包括：
    1 #include 主要用于包含头文件，可以使用头文件中定义的变量、函数和结构、联合等。
    2 #define #undef 定义或取消宏变量、宏函数
    3 条件编译： #if #elif #else #endif    
      #ifndef  #ifdef  #endif
      在编译期间选择分支，而C程序中的if else是在运行期间选择分支，编译时都会进行编译。
  
   今天再讲点额外的：
    #error - 产生一个错误
    #warning - 产生一个警告
    #pragma - 额外提供一些功能
    #line - 指定行号，意义不大
    
   #pragma GCC dependency 文件名a
    关联两个文件的时间，如果当前文件比a文件新，就没事；如果a文件比当前新，就会产生一个警告
   #pragma GCC poison 单词
    把单词声明为毒药，禁止使用，否则产生错误
   #pragma pack(n)
   以n的倍数作为结构体对齐和补齐的字节数，n如果大于4，按4计算。
  对齐就是每个成员必须前面留出 sizeof(自己)的整数倍，超过4字节的按4算，补齐就是整个结构的大小应该是最大成员的整数倍，超过4字节按4子节算。
  对齐和补齐会提升效率，但浪费了空间。如果不想浪费空间，可以使用#pragma pack(1) 解决。

  关于头文件
   代码可以写到头文件(.h)和源文件(.c)中，如何分工？
    各种声明写在头文件中，各种实现写在源文件中。变量的声明、函数的原型声明、结构体/联合的声明都写在头文件中；变量的赋值、函数的代码都写在源文件中。

  定位头文件，系统头文件系统搞定；程序员自定义的头文件，有三种方法可以找到：
   1 用" "把头文件扩起来，用相对路径定位目录，比如"./a/add.h"
   2 gcc -I后面跟头文件所在的目录，用<>也能找到。
   3 用环境变量CPATH设置头文件所在的目录，用<>也能找到。
 环境变量的设置，在bash下，用
   export CPATH=. 
 即可设置，. 代表当前目录。 







