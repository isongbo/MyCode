复习：
1.文件的读写函数
  open() - 打开文件
  close() - 关闭文件
  read() - 读取文件中的内容
  write() - 向文件中写入数据内容
  lseek() - 重置文件的读写位置
  文件描述符 - 本质上非负整数,一般从0开始,其中0 1 2都被系统占用，表示标准输入、标准输出以及标准错误,文件描述符和文件表建立对应关系

  标C和UC的比较：标C函数比UC函数效率高,因为标C函数都提供了缓冲区,UC函数可以自定义缓冲区来提高效率,使用time命令查看进程执行的时间

2.文件的非读写函数
   dup()和dup2() => 复制文件描述符，本质就是多个文件描述符对应同一个文件
   fcntl()函数 
 =>(1)复制文件描述符
   (2)获取/设置 文件描述符/文件状态的信息
   (3)文件锁的功能(重点) 

   文件锁本质就是读写锁;其中读锁是一把共享锁，允许其他进程加读锁，不允许加写锁;而写锁是一把互斥锁,不允许其他进程加读锁和写锁
--------------------------------------------------------
今天内容：
   (1)文件的非读写函数
   (2)目录操作
   (3)进程和多进程的初识

1.文件的非读写函数
1.1 fcntl函数
(1)F_SETLK - 加锁/解锁
练习：
   vi 01lock.c 对文件a.txt中前10个字节加读锁，占用20秒之后结束进程

总结：
   加完读锁之后,还是可以向文件中写入数据内容的,结果说明锁是独立于文件的,并没有真正锁定对文件的读写操作，也就是该锁只能锁定 其他的锁，也就是说可以导致其他进程加锁失败

问题：
   如何使用文件锁控制文件的读写操作呢？

解决方案：
   一般来说,可以使用文件锁能否加上来间接地控制文件的读写操作，也就是说可以在读操作之前尝试加读锁,在写操作之前尝试加写锁

释放锁的方式：
   a.进程结束时自动释放所有锁
   b.将锁的类型l_type = F_UNLCK,使用fcntl函数重新设置
  
(2)F_SETLKW - 表示加锁，加不上则等待，直到加上为止
(3)F_GETLK 
   - 表示使用第三个参数指定的锁去取代文件上已有的锁,如果可以加上参数锁则不去加锁，而是将参数锁的类型改为F_UNLCK，如果不能加上参数锁，则将文件上已有的锁信息通过参数带出来，l_pid为真正给文件加锁的进程号

1.2 stat/fstat函数
   #include <sys/types.h>
   #include <sys/stat.h>
   #include <unistd.h>
   int stat(const  char  *path, struct stat *buf);
   int fstat(int fd, struct stat *buf);
第一个参数：文件路径和文件名/文件描述符
第二个参数：结构体指针，用于将获取的信息带出去
   struct stat 
   {
       dev_t st_dev;/*设备ID*/
       ino_t st_ino;/*i节点编号*/
       mode_t st_mode;/*文件类型和权限*/
       nlink_t st_nlink;/*硬连接数*/
       uid_t st_uid;/*属主ID*/
       gid_t st_gid;/*属组ID*/
       dev_t st_rdev;/*特殊的设备ID*/
       off_t st_size;/*大小,字节数*/
       blksize_t st_blksize; /*块大小*/
       blkcnt_t  st_blocks;  /*块的数量*/
       time_t    st_atime;/*最后一次访问时间*/
       time_t    st_mtime;/*最后一次修改时间*/
       time_t    st_ctime;/*最后一次状态改变时间*/
   };
要求熟悉：
   mode_t st_mode;/*文件类型和权限*/ 
   off_t st_size;/*大小,字节数,重点掌握*/
   time_t    st_mtime;/*最后一次修改时间*/

函数功能：获取指定文件的详细信息

扩展内容：
   #include <time.h>
   char *ctime(const time_t *timep);
  => 主要用于将整数类型的时间转换为字符串类型的时间
   struct tm *localtime(const time_t *timep);
  => 主要用于将整数类型的时间转换为结构体指针类型
   struct tm 
   {
      int tm_sec;/*秒数*/
      int tm_min;/*分钟*/
      int tm_hour;/*小时*/
      int tm_mday;/*天数*/
      int tm_mon;/*月份 + 1 */
      int tm_year;/*年份 + 1900 */
      int tm_wday;/*星期 + 1*/
      int tm_yday;/*一年中的天数 + 1*/
      int tm_isdst;/*夏令时,了解*/
   };

1.3 access函数
   #include <unistd.h>
   int access(const char *pathname, int mode);
第一个参数：文件的路径和文件名
第二个参数：操作模式
     R_OK - 可读   W_OK - 可写  X_OK - 可执行
     F_OK - 是否存在
函数功能：测试文件的权限和存在性

1.4 chmod函数和truncate函数
   #include <sys/stat.h>
   int chmod(const char *path, mode_t mode);
   int fchmod(int fd, mode_t mode);
第一个参数：文件路径和文件名/文件描述符
第二个参数：指定八进制的权限即可,如:0644
函数功能：修改指定文件的权限

   #include <unistd.h>
   #include <sys/types.h>
   int  truncate(const  char  *path,   off_t length);
   int ftruncate(int fd, off_t length);
第一个参数：文件路径和文件名/文件描述符
第二个参数：文件的指定大小
函数功能：将指定的文件大小修改为length指定的大小

1.5 umask函数(了解)
    #include <sys/types.h>
    #include <sys/stat.h>
    mode_t umask(mode_t mask);
函数功能：
    表示通过参数设置新的 文件创建时的权限屏蔽字，返回旧的权限屏蔽字

1.6 又见mmap函数和munmap函数
   => 主要用于建立/解除 虚拟地址到文件的映射
如：
   定义员工信息结构体,定义3个员工信息保存到文件中

1.7 其他函数
   link() - 创建链接的函数
   unlink() - 删除链接的函数
   rename() - 重命名的函数
   remove() - 删除文件的函数
   ...

2.目录的基本操作
2.1 opendir函数
   #include <sys/types.h>
   #include <dirent.h>
   DIR *opendir(const char *name);
函数功能：
   表示打开参数name指定的目录，返回DIR类型的指针,失败返回NULL

2.2 readdir函数
    #include <dirent.h>
    struct dirent *readdir(DIR *dirp);
函数功能：
    表示根据参数指定的位置读取目录中的内容，成功返回一个struct dirent类型的指针,失败返回NULL

结构体信息如下：
   struct dirent 
   {
      ino_t d_ino;/*i节点编号*/
      off_t d_off;/*偏移量*/
      unsigned short d_reclen;/*记录的大小*/
      unsigned char  d_type;/*文件的类型*/
      char d_name[256]; /*文件名称*/
   };
要求熟悉： d_type 和 d_name

2.3 其他目录操作函数
   getcwd() - 获取当前程序所在的工作目录
   mkdir() - 创建一个目录
   rmdir() - 删除一个目录
   chdir() - 切换目录
   ...  
作业:
   1.采用递归的思想打印目录中的内容，要求子目录中的内容也要打印出来

提示：
   void print(char* path)
   {
       //1.打开目录
       //2.读取目录中的内容
       //3.判断是文件还是目录
       //3.1 如果是文件直接打印
       //3.2 如果是目录先打印再递归,注意避免 . 和 ..
       ...
   }
   int main(void)
   {
       print("../../day02/code");
   }

  2.编写一个函数generator_id(),要求该函数模拟自动生成账号的功能,账号默认从100000开始，依次递增
   
明日预报：
   (1)进程和多进程的学习















   



























  




























































