复习：
1.使用共享内存进行进程间的通信
1.1 通信流程
   (1)获取key值,使用ftok函数
   (2)创建共享内存/获取共享内存,得到ID，使用shmget函数
   (3)挂接共享内存,使用shmat函数
   (4)使用共享内存
   (5)脱接共享内存,使用shmdt函数
   (6)如果不再使用，则删除共享内存,使用shmctl函数

1.2 基本命令
   ipcs -m 表示查看共享内存
   ipcrm -m 共享内存ID 表示删除指定的共享内存

2.使用消息队列进行进程间的通信
2.1 基本流程
   (1)获取key值,使用ftok函数
   (2)创建消息队列/获取消息队列,得到消息队列ID,使用msgget函数
   (3)发送消息/接受消息,使用msgsnd函数和msgrcv函数
   (4)如果不再使用，则删除消息队列,使用msgctl函数

2.2 基本命令
   ipcs -q  表示查看消息队列
   ipcrm -q 消息队列ID 表示删除指定的消息队列

3.使用信号量集进行进程间的通信
3.1 概念
   信号量 - 本质就是一个计数器,用于控制同时访问共享资源的进程数/线程数
   信号量集 - 信号量的集合，控制多种共享资源

3.2 计数器的工作方式
  (1)初始化计数器，指定最大值
  (2)如果有进程申请到资源，则计数器 减1
  (3)当计数器为0时，申请资源的进程进入阻塞状态
  (4)如果有进程释放资源，则计数器 加1
  (5)当计数器 >0 时，阻塞的进程可以申请到资源,申请不到的进程继续阻塞

3.3 使用流程
  (1)获取key值,使用ftok函数
  (2)创建信号量集/获取信号量集，得到ID,使用semget函数
  (3)初始化信号量集,使用semctl函数
  (4)操作信号量集中指定的信号量,使用semop函数
  (5)如果不再使用，删除信号量集，使用semctl函数

3.4 基本命令
   ipcs -s 查看信号量集
   ipcrm -s 信号量集的ID  表示删除指定的信号量集
   ipcs -a 查看所有的IPC结构
------------------------------------------------------
今天内容：
   (1)信号量集的使用
   (2)网络编程(重点)

1.信号量集的使用
2.网络编程
2.1 网络的基本常识
   目前主流的通讯软件：QQ 微信 飞信 YY 阿里旺旺 ...
如：
   甲方：在吗？  呵呵  回车  
   对方：在吗？  呵呵

(1)7层网络模型
   ISO(国际标准委员会组织)对网络从逻辑上划分了7层,网络的7层模型如下：
   应用层：主要表示针对应用软件的通信,也就是将数据交给
           了应用软件
   表示层：主要实现按照统一规则对原始数据的封装
   会话层：主要控制会话的开始和结束等等，会话就是对话
   传输层：主要描述数据的传输通道，更多的表示逻辑概念
   网络层：主要借助很多网络通信协议传输，表示物理概念
   数据链路层：主要用于进行数据的转换,转为高低电平信号
   物理层：主要表示各种物理设备,如路由器和交换机之类的

(2)网络协议
   TCP - 传输控制协议,是一种面向连接的协议,传输文件
   UDP - 用户数据报协议,是一种非面向连接的协议,聊天
   IP - 互联网协议，是上述协议的底层协议

(3)IP地址
   IP地址 就是互联网中的唯一标识,本质上就是32位二进制的整数,也就是IPV4,正在向IPV6转换,128位二进制
   IP地址采用的是点分十进制表示法,也就是将每一个字节转换为十进制，多个字节的整数之间用点分隔开,如：192.168.1.1
   IP地址分成两部分：网络地址 和 主机地址
   A类： 0 + 7位网络地址 + 24位主机地址
   B类：10 + 14位网络地址 + 16位主机地址
   C类：110 + 21位网络地址 + 8位主机地址
   D类：1110 + 28位多播地址

(4)子网掩码
   主要用于区分一个IP地址中的网络地址和主机地址
如：
   IP地址：  192.168.100.2  
   子网掩码：255.255.255.0 &
-------------------------------
             192.168.100.0
   网络地址：192.168.100
   主机地址：2

   主要用于判断两个IP是否在同一个网络内部

(5)Mac地址
   俗称 物理地址,就是硬件网卡上的地址,不会随着重装系统而发生改变,一般主要用于路由器等设备上进行过滤等操作
   Windows操作系统： 
      ipconfig   ipconfig/all => 查看IP地址等信息
      ping  mstsc ...
   unix/linux操作系统：
      ifconfig  => 查看IP地址等信息

(6)端口号
   IP地址 - 在互联网中的唯一标识，通过IP地址定位主机
   端口号 - 主要用于定位主机上的某一个进程
   端口号的数据类型：unsigned short 类型,范围 0 ~ 65535,其中 0 ~ 1024的端口号由系统占用   
   网络编程：IP地址  和  端口号

(7)字节序
如：0x12345678 
   小端系统：表示低位字节存储低位数据 0x78 56 34 12
   大端系统：表示低位字节存储高位数据 0x12 34 56 78
   网络字节序：为了解决不同系统的兼容性问题，一般将发送到网络中数据都先转换为网络字节序再进行发送,对方受到数据后，再转为主机字节序进行解析
   网络字节序本质就是大端系统的字节序

2.2 基于Socket的一对一通信模型
服务器：
   (1)创建socket,使用socket函数
   (2)准备通信地址,采用结构体类型
   (3)绑定socket和通信地址,使用bind函数
   (4)进行通信,使用read/write函数
   (5)关闭socket,使用close函数
客户端：
   (1)创建socket,使用socket函数
   (2)准备通信地址,采用结构体类型
   (3)连接socket和通信地址,使用connect函数
   (4)进行通信,使用read/write函数
   (5)关闭socket,使用close函数

2.3 相关函数的解析
(1)socket函数
   #include  <sys/types.h>        
   #include <sys/socket.h>
   int socket(int domain, int type, int protocol);
第一个参数：域,地址簇，决定本地通信还是网络通信
   AF_UNIX/AF_LOCAL - 表示本地通信
   AF_INET - 表示基于IPV4的网络通信
   AF_INET6 - 表示基于IPV6的网络通信
第二个参数：通信类型和通信协议
   SOCK_STREAM - 表示数据流通信，用于TCP通信协议
   SOCK_DGRAM - 表示数据报通信,用于UDP通信协议
第三个参数：特殊协议，给0即可
返回值：成功返回Socket描述符,失败返回-1
函数功能：创建一个用于通信的Socket,Socket就是通信载体

(2)通信地址
a.通用结构体类型
  struct sockaddr 
  {
     sa_family_t sa_family;
     char        sa_data[14];
  };
  主要作为函数的参数类型，并不会单独去使用
      
b.本地通信的结构体类型
  #include <sys/un.h>
  struct sockaddr_un
  {
      sa_family_t sun_family;//地址簇，与socket第一个参数保持一致即可
      char  sun_path[];//Socket文件的路径和文件名
  };

c.网络通信的结构体类型
  #include <netinet/in.h>
  struct sockaddr_in
  {
     sa_family_t sin_family; //AF_INET.
     in_port_t   sin_port;//端口号
     struct in_addr sin_addr;//IP地址
  };
  
  struct in_addr
  {
     in_addr_t  s_addr; //IP地址
  };

(3)bind函数
   #include <sys/types.h>        
   #include <sys/socket.h>
    int bind(int sockfd, const struct sockaddr *addr,socklen_t addrlen);
第一个参数：socket描述符,也就是socket函数的返回值
第二个参数：准备的通信地址的地址
第三个参数：通信地址的大小
函数功能：绑定socket和通信地址

(4)connect函数
    #include <sys/types.h>          
    #include <sys/socket.h>
    int connect(int sockfd, const struct sockaddr *addr,socklen_t addrlen);
函数功能：
    建立socket到通信地址的连接,参数和返回值同bind一样

注意：
   客户端准备的通信地址本质就是服务器端的通信地址,所以客户端可以通过该地址向服务器发数据内容，如果服务器需要给客户端发送数据，则需要提供客户端的通信地址

明日预报：
    综合小项目: 简易的银行账户管理系统!







  
















