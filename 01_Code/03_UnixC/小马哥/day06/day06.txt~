复习：
   内存相关的函数：sbrk()/brk()/mmap()/munmap()
   文件相关的函数：open()/close()/read()/write()
   linux系统中几乎把一切都统称为文件,包括设备/目录等
   /dev/null  空设备(回收站)
   /dev/tty   终端，输入输出设备

作业：
    ...
------------------------------------------------------
今天内容：
    (1)文件的相关操作

1.文件的相关操作
1.1 文件描述符
   文件描述符本质上就是一个整数，可以代表一个打开的文件，但是文件的信息并不是存放在文件描述符中，而是存在一个文件表中,当文件被打开时，会将文件的信息放入文件表中，但是处于安全性等方面的考虑，文件表不适合直接被程序操作，于是给文件表对应一个编号，通过操作编号来操作文件
    操作系统中的每一个进程有一张描述符的总表，当有新的文件描述符需求时，会去总表中查找未使用的最小的值并且返回，让最小的文件描述符和文件表建立关联,从而操作文件
    文件描述符是个非负数，从0开始,一般到255的最大值，其中0,1,2被系统占用，用于表示标准输入、标准输出、以及标准错误

1.2 标C文件操作和UC文件操作区别
   标C: fopen()/fclose()/fread()/fwrite();
   UC:  open()/close()/read()/write();

小结：
   标C函数都有 输入/输出缓冲区，当积累一个数量的数据之后进行都写，因此访问效率比较高
   UC函数虽然在内核层也有小型的缓冲区，但是和标C函数相比读写效率还是很低
   使用time命令可以查看程序的运行时间

1.3 lseek函数
   #include <sys/types.h>
   #include <unistd.h>
   off_t  lseek(int  fd,  off_t  offset, int whence);
第一个参数：文件描述符
第二个参数：文件中的偏移量
第三个参数：起始位置
     SEEK_SET  - 文件开头位置
     SEEK_CUR  - 文件的当前位置
     SEEK_END  - 文件末尾位置
返回值：
     成功返回当前位置和文件开始位置的差值,失败返回-1
函数功能：修改文件的读写位置

注意：
   (1)echo -n hello > a.txt  表示a.txt文件中没有\n
   (2)SEEK_END 始终表示文件中最后一个元素的下一个位置
   (3)文件的读写位置一般从0开始，类似于数组

1.4 dup/dup2函数
   #include <unistd.h>
   int dup(int oldfd);
   int dup2(int oldfd, int newfd);
第一个参数：旧的文件描述符
第二个参数：指定的新文件描述符
返回值：成功返回新的文件描述符，失败返回-1
函数功能：对文件描述符的拷贝,也就是让多个文件描述符指
    向同一个文件表，从而操作同一个文件

1.5 fcntl函数
   #include <unistd.h>
   #include <fcntl.h>
   int fcntl(int fd, int cmd, .../* arg */ );
第一个参数：文件描述符
第二个参数：具体的操作
    F_DUPFD - 复制文件描述符，找出大于等于arg参数的描
         述符进行复制，与dup2函数不同的是不会强制占用
         已经使用的文件描述符
    F_GETFL/F_SETFL - 获取/设置文件的状态标志以及访问
         模式,其中设置时O_APPEND可以设置成功的，获取时
         忽略参数arg,设置时通过arg传入实参
    F_SETLK/F_SETLKW/F_GETLK - 设置/设置等待/测试锁

第三个参数：可变长参数
返回值：
    F_DUPFD - 成功新的文件描述符，失败返回-1
    F_GETFL - 成功返回文件的状态标志，失败返回-1
    F_SETFL - 成功返回0，失败返回-1 
函数功能：
    F_DUPFD -  进行文件描述符的拷贝

作业：
    (1)预习F_SETLK/F_SETLKW/F_GETLK选项
    (2)练习文件操作，实现一个学生信息管理系统，实现的功能增删改查，要求所有功能直接操作文件实现
提示：truncate函数

明日预报：
    (1)文件相关的函数
    (2)目录操作















 














    
   












