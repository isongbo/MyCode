复习：
   要求大家自己把银行的项目写一遍

今天内容：
   (1)IPC - 信号量集
   (2)网络 - 网络常识，本地通信，网络通信

1.信号量集
1.1 概念
(1)什么叫信号量?
   信号量本质就是一个计数器，主要用于控制同时访问资源的进程总数，解决有限资源的分配问题

(2)信号量集
   信号量集就是由多个信号量组成的集合/数组，同时可以管理多种有限资源
   IPC的第三种通信方式：就是创建/获取信号量集进行通信
  
1.2 计数器的工作方式
   (1)先把计数器初始化为最大值
   (2)有进程申请资源，那么计数减1
   (3)当计数为0时，终止进程对资源的申请，申请有限资源的进程进入阻塞状态
   (4)有进程释放资源，那么计数加1
   (5)当计数大于0时，阻塞的进程就可以拿到资源，直到计数为0时，其他进程继续阻塞

1.3 使用信号量集进行进程间通信的流程
   (1)获取key值，使用ftok函数,给定一个固定的值
   (2)创建/获取信号量集，使用semget函数
   (3)初始化信号量集，给指定的信号量进行初始化，使用semctl函数
   (4)操作信号量集，对指定的信号量进行加1/减1的操作,使用semop函数
   (5)如果不再使用信号量集，可以删除，使用semctl函数

1.4 函数的解析
(1)semget函数
   #include <sys/types.h>
   #include <sys/ipc.h>
   #include <sys/sem.h>
   int semget(key_t key, int nsems, int semflg);
第一个参数：ftok函数的返回值
第二个参数：信号量集中信号量的个数
第三个参数：创建的标志
     IPC_CREAT - 创建
     IPC_EXCL - 与创建搭配使用,如果存在则创建失败
返回值：成功返回一个信号量集的id,失败返回-1
函数的功能：获取一个信号量集的id   

注意：
   在创建新的信号量集时，需要指定权限

(2)semctl函数
   #include <sys/types.h>
   #include <sys/ipc.h>
   #include <sys/sem.h>
   int semctl(int semid, int semnum, int cmd, ...);
第一个参数：semget函数的返回值
第二个参数：信号量集中的指定的信号量，也就是下标(从0开始)
第三个参数：具体的操作命令
     IPC_RMID - 删除信号量集，第四个参数给NULL即可
     SETVAL - 设置信号量集中指定的信号量的初始值，需要
           借助第四个参数传数值
第四个参数：可变长参数
     针对SETVAL使用，传递具体的整数值即可
返回值：成功返回0，失败返回-1
函数的功能：表示对信号量集中信号量的具体操作

(3)semop函数
   #include <sys/types.h>
   #include <sys/ipc.h>
   #include <sys/sem.h>
   int semop(int semid, struct sembuf *sops, unsigned nsops);
第一个参数：semget函数的返回值
第二个参数：结构体指针,结构体成员如下：
    unsigned short sem_num;/*信号量集的下标*/
    short sem_op;
  => 表示针对信号量集中下标为sem_num的信号量进行操作
     正数表示增加，负数表示减少
    short sem_flg; /*一般给0即可*/
第三个参数：信号量集中元素的个数
返回值：成功返回0，失败返回-1
函数的功能：对信号量的具体操作

1.5 相关的命令
   ipcs -s   表示查看信号量集
   ipcrm -s  信号量集id  表示删除指定的信号量集
   ipcs -a   表示查看所有的ipc通信,包括三种ipc通信方式

   sigset_t  结构体   unsigned long buf[32]; 128

2.网络
2.1 网络常识
   目前主流的网络通讯软件：QQ 微信 飞信 YY 阿里旺旺 .... 
(1)七层网络模型
   主要是由ISO(国际标准委员会组织)负责将网络协议从逻辑上划分了以下七层：
   a.应用层 - 主要与应用程序进行通信
   b.表示层 - 主要将应用程序的数据按照统一的规则封装
   c.会话层 - 聊天，对话的意思，控制会话的开始结束等等
   d.传输层 - 主要用于数据交换的通道，逻辑的概念
   e.网络层 - 主要通过具体的网络协议进行数据的传递，物理的概念
   f.数据链路层 - 主要将具体的信息进行编码以及转换
   g.物理层 - 主要体现具体的物理设备，比如交换机等   

(2)常见的网络协议
a.TCP协议 - 传输控制协议
   面向连接的协议，相对比较安全 打电话
b.UDP协议 - 用户数据报协议
   非面向连接的协议，相对效率比较高  写信/发短信     
c.IP协议 - 互联网协议
   信息传递机制，实际是上述两种协议的底层协议
   
(3)IP地址
   IP地址 - 是internet中唯一的地址标识，本质上就是一个32位整数(IPV4),正在向128位扩展(IPV6)
   采用点分十进制表示法来表示IP地址,如：192.168.1.1 
   IP地址主要分为两部分：网络号 和 主机号
   IP地址的分级：
      A类：0 + 7位网络地址 + 24位主机地址
      B类：10 + 14位网络地址 + 16位主机地址
      C类：110 + 21位网络地址 + 8位主机地址
      D类：1110 + 28位多播地址
   子网掩码：主要用于指定网络地址和主机地址,与IP地址搭配使用,本身无太大意义
如：
   子网掩码 & IP地址 = 网络地址
   IP地址：192.168.182.48
   子网掩码：255.255.255.0
   网络地址：192.168.182
   主机地址：48
   可以判断两个IP地址是否在同一个网络内部

   192 => 1100 0000 
   255 => 1111 1111 &
-------------------------
          1100 0000 => 192

   MAC地址，俗称物理地址，就是硬件网卡上的地址,唯一的
，主要用于限制网络时进行MAC地址绑定
   
(4)端口号
   IP地址可以用于定位计算机/移动终端
   端口号可以定位计算机/移动终端中的具体某个进程
   网络编程需要提供IP地址和端口号
   端口号是 unsigned short类型,范围是：0 ~ 65535,其中 0 ~ 1024的端口号一般由系统占用，比如HTTP：80，FTP：21端口 ...

(5)字节序
   字节次序：计算机中存储整数时，有从高到低的地址空间中依次存放从高到低的数据内容，也有存放从低到高的数据内容，于是存在字节次序的问题
   低位内存地址存放低位数据，叫做小端系统
   低位内存地址存放高位数据，叫做大端系统 
   主机字节序: 当前主机存放数据的字节序
   网络字节序：在网络传输过程中存放数据的字节序       
   
2.2 网络编程模型 - 基于Socket的通信模型
   Socket - 插座的意思,表示一个逻辑通信载体
(1)一对一的通信模型
服务器：
   a.创建socket,使用socket()函数
   b.准备一个通信地址,提供通信的相关信息,使用结构体
   c.socket和通信地址进行绑定,使用bind()函数
   d.进行通信,使用read()/write()函数
   e.关闭socket,使用close()函数
客户端：
   a.创建socket,使用socket()函数
   b.准备一个通信地址，使用结构体
   c.进行socket和通信地址的连接,使用connect函数
   d.进行通信,使用read()/write()函数
   e.关闭socket,使用close()函数

2.3 相关函数的解析
(1)socket函数
   #include  <sys/types.h>
   #include <sys/socket.h>
   int socket(int domain, int type, int protocol);
第一个参数：域
     AF_UNIX/AF_LOCAL - 表示本地通信
     AF_INET - 表示基于IPV4的网络协议通信
     AF_INIT6 - 表示基于IPV6的网络协议的通信
第二个参数：通信协议
     SOCK_STREAM - 数据流通信，主要用于TCP通信协议
     SOCK_DGRAM - 数据报，主要用于UDP通信协议
第三个参数：特殊协议,一般给0即可
返回值：成功返回一个文件描述符，失败返回-1
函数的功能：主要用于创建socket,用于通信的交流点      

(2)通信地址
a.通用通信地址,主要用于函数的参数
   struct sockaddr 
   {
       sa_family_t sa_family; //指定域
       char        sa_data[14];//指定地址
   };

b.本地通信地址,主要用于本地通信
   #include <sys/un.h>
   struct sockaddr_un
   {
       sa_family_t  sun_family; //域
       char         sun_path[]; //路径
   };   

c.网络通信地址，主要用于网络通信
   #include <netinet/in.h>
   struct sockaddr_in
   {
      sa_family_t     sin_family;//域
      in_port_t       sin_port;//端口号
      struct in_addr  sin_addr;//ip地址
   };
   struct in_addr
   {
      in_addr_t  s_addr; //ip地址
   };

作业：
   (3)bind函数
   (4)connect函数

明日预报：
   (1)网络编程
   (2)多线程











