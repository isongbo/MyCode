复习：
1.信号相关的处理
1.1 sigaction函数
    ....
------------------------------------------------------
今天内容：
    (1)消息队列的使用
    (2)银行账户管理系统

1.消息队列的使用
1.1 概念
   消息队列 - 存放消息的队列

1.2 消息队列的使用步骤
  (1)获取key值，使用ftok()函数
  (2)创建/获取消息队列,使用msgget()函数  
  (3)发送/接受消息,使用msgsnd()/msgrcv()函数
  (4)如果不再使用，删除消息队列，使用msgctl()函数

1.3 函数的解析
(1)msgget函数
   #include <sys/types.h>
   #include <sys/ipc.h>
   #include <sys/msg.h>
   int msgget(key_t key, int msgflg); 
第一个参数：ftok函数返回值
第二个参数：标志
     IPC_CREAT - 创建
     IPC_EXCL  - 与创建搭配使用，如果存在则失败
返回值：成功返回消息队列的id,失败返回-1
函数的功能：获取消息队列的id号

注意：
    当创建新的消息队列时，需要指定权限，如:0666

(2)msgsnd函数
   #include <sys/types.h>
   #include <sys/ipc.h>
   #include <sys/msg.h>
   int msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg);
第一个参数：消息队列的id,msgget()函数的返回值
第二个参数：要发送的消息首地址
    struct msgbuf 
    {
       long mtype;/*消息的类型，必须> 0 */
       char mtext[1]; /*消息内容,可以用其他数据类型*/
    };

第三个参数：要发送的消息大小
    大小指的消息内容的大小，不包括消息的类型
第四个参数：发送的模式，一般给0即可
返回值：成功返回0，失败返回-1
函数的功能：发送消息到消息队列中

(3)msgrcv函数
    ssize_t msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp,int msgflg);
第一个参数：消息队列的id
第二个参数：存放消息的首地址
第三个参数：接受的消息大小,不包括消息的类型
第四个参数：接受的消息类型
     0 - 表示读取消息队列中的第一个消息
    >0 - 表示读取消息队列中的第一个类型为msgtyp的消息
    <0 - 表示读取消息队列中小于等于msgtyp绝对值的第一
         个消息,优先选择类型比较小的消息
第五个参数：标志，一般给0即可
返回值：成功返回接受到的数据大小，失败返回-1
函数的功能：从消息队列中接受消息

(4)msgctl函数
   #include <sys/types.h>
   #include <sys/ipc.h>
   #include <sys/msg.h>
   int msgctl(int msqid, int cmd, struct msqid_ds *buf);
第一个参数：消息队列的id
第二个参数：具体的操作命令
    IPC_RMID - 删除
第三个参数：结构体指针,删除时给NULL即可
返回值：成功返回0，失败返回-1
函数的功能：对消息队列各种操作

1.4 相关的命令
    ipcs -q  表示查看消息队列
    ipcrm -q 消息队列的id 表示删除指定的消息队列

2.综合项目
2.1 项目名称
   银行账户管理系统
2.2 项目功能
   开户  销户  存钱  取钱  转帐  查询  退出 
2.3 项目分析
(1)采用Ｃ/Ｓ架构设计
   服务器：接受客户端的用户选择，进行对应的处理，将处理结果发送给客户端，显示给用户看
   客户端：给用户提供一个界面信息，支持用户选择对应的业务，一旦用户选择完毕之后，将对应的选择发送给服务器，服务器处理完毕之后结果发送给客户端显示

(2)服务器和客户端的通信问题
   采用进程间通信中的消息队列方式解决此问题
   提供两个消息队列：
      消息队列一 - 客户端向服务器发消息
      消息队列二 - 服务器向客户端发消息
(3)不同的业务采用不同的消息类型区分
      8个消息类型：6个业务 + 操作成功 + 操作失败   
(4)采用结构体表示账户信息和消息信息    
     struct Account
     {
          int id;//帐号
          char name[20]; //账户名称
          char pass[10]; //账户密码
          double money;  //账户余额
     };
     struct Msg
     {
         long mtype;//消息类型
         struct Account acc;//账户信息
     };
(5)项目执行流程
    启动服务器 -> 启动客户端 -> 客户端界面 -> 选择开户，用户输入开户名称，密码以及余额 -> 将数据通过消息队列一发送给服务器 -> 自动生成帐号,将用户信息存储起来 -> 将处理结果反馈给客户端

2.4 注意事项
   (1)消息队列的建立放在服务器
   (2)将多个账户信息分别存放在不同的文件比较好
        使用账户id作为文件名，sprintf函数
   (3)服务器可以支持多进程，vfork() + execl()函数
   (4)服务器端放入无限循环,使用信号关闭服务器
        服务器的善后工作放在信号的处理函数中即可

2.5 项目要求
   (1)使用多文件编程，支持Makefile文件
   (2)要求必须实现开户的功能，其他功能选做



   














