1.自我介绍
  马如忠  maruzhong/ruzhong ma   
  小马哥/马哥   
  marz@tarena.com.cn

2.uc课程介绍
2.1 简介  
  unix/linux系统下的高级C开发   15天
  unix系统和linux系统区别：
      (1)unix系统更多地依赖于硬件,linux系统可以运行在
         多种硬件平台上
      (2)unix系统是收费的，linux系统是免费的，linux系
         统在unix系统的基础上诞生的

2.2 课程内容
  (1)unix/linux 系统的基本概述
  (2)unix/linux 编程的基础和开发方式
      -> gcc编译器，静态库和动态库
  (3)unix/linux 内存管理
      -> 虚拟内存管理技术
  (4)unix/linux 文件操作和目录操作
      -> 打开文件，遍历目录 
  (5)unix/linux 系统的进程管理
      -> 多进程  
  (6)unix/linux 信号处理   
  (7)unix/linux 系统下进程间的通信
  (8)unix/linux 系统下的网络编程
  (9)unix/linux 系统下的多线程开发

2.3 学习方法
  (1)课堂上尽量记笔记和代码
  (2)练习指法
  (3)中午午休
  (4)程序员是代码喂出来的
------------------------------------------------------
今天内容：
   (1)unix/linux系统的简介
   (2)gcc编译器
   (3)多文件结构和预处理指令
   (4)环境变量的初识
   (5)静态库和动态库的使用

1.unix/linux系统的简介
   unix系统 于1971年诞生，具有多用户、多任务以及支持多种处理器的特点
   linux系统是一款自由和开源的类unix操作系统

2.gcc编译器
2.1 概念
  gcc原名为：GNU C 编译器(Compiler),后来陆续出现了C++、JAVA、C#等语言，扩展了GNU 编译器(Compiler) 集合(Collection),支持多种语言的编译 

2.2 功能
  gcc主要用于 预处理  编译  生成汇编文件 链接的功能   
  预处理 - 头文件进行处理，以及进行宏替换
  编译 - 主要检查语法错误
  汇编 - 主要将高级语言转换为汇编语言
  链接 - 把相关的资源文件都链接起来
  其中前3步一般广义上都统称为编译

2.3 常见的选项
   -E  进行预处理,默认输出到标准输出设备上,可以使用-o 将处理信息输出到指定xxx.i文件
   -c  只编译不链接,默认生成.o文件
   -S  生成汇编文件，默认生成.s文件
   -o  指定输出文件的文件名,不指定输出文件名，默认生成a.out文件
   gcc 编译 + 链接 ,默认生成a.out
比如：
   cc -E xxx.c
   cc -E xxx.c -o xxx.i
   cc -S xxx.c/xxx.i
   cc xxx.c/xxx.i/xxx.s 

   -std 指定编译链接所遵循的C标准
   -v   查看编译器的版本
   -Wall 尽可能产生警告信息
   -g   生成调试信息,主要用于GDB调试使用
   -O   优化  
   man gcc 查看gcc的各种选项

2.4 比较常用的C文件
   .h 头文件
   .c 源程序文件
   .o 目标文件(-c) 
   .i 经过预处理之后的文件(-E)
   .s 汇编文件(-S)
   .a 静态库文件
   .so 共享库文件

3.多文件和预处理指令
3.1 多文件程序
   .h 头文件,各种变量和函数的声明，结构体的定义
   .c 各种变量和函数的定义
   .a/.so 功能性代码打包起来便于其他程序的使用

3.2 预处理指令
   #include ""  和  #include <> 
   #define PI 3.14  
   #if  #elif  #else ...
注意：
   #if 在预处理进行判断
   if 在运行时进行判断

   #line n => 修改文件的行号，也就是从下一行起为第n行
   
   #warning 表示产生一个警告
   #error   表示产生一个错误
   
   #pragma 主要用于提供一些额外的信息
   #pragma GCC dependency 文件名 
   => 表示当前文件和依赖文件进行比较，当依赖的文件的最后一次修改时间比当前文件晚，则产生警告
   #pragma GCC poison 标识符 
   => 表示将此标识符设置为毒药,一旦使用则产生错误 
   #pragma pack(整数)
   => 表示改变结构体的对齐和补齐方式，主要用于节省内存空间的大小

4.环境变量和编程环境
4.1 环境变量
   PATH 就是一个环境变量，存放的是系统路径和应用程序的路径,PATH中存放的应用程序路径使得该程序再不需要路径的情况下也可以运行

4.2 环境变量的配置
(1)Windows系统的环境变量配置：
    我的电脑 -> 右键 -> 属性 -> 高级 -> 环境变量 -> 系统变量 -> PATH -> 将可执行文件的路径追加进去(;路径) -> 确定 -> 实现的效果就是在dos窗口中可以直接通过可可执行文件名将程序执行起来

(2)linux系统的环境变量配置
   export PATH=.:$PATH
   $PATH 表示将原来的PATH值取出来
   : 各种路径的分隔符
   . 当前目录的意思
   => 表示将当前目录追加到PATH目录中，然后对于当前目录中的可执行文件的运行时，就不再需要加./
   => 上面的设置是一次性的,于当前终端中好使

   vi ~/.bashrc
   






            
   
   







  
   
   
   







 




