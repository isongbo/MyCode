一 MFC的消息映射机制（3）
  1 消息映射机制的使用
    1.1 类必须派生自CCmdTarget
    1.2 类内必须添加声明宏 DECLARE_MESSAGE_MAP
    1.3 类外必须添加实现宏
        BEGIN_MESSAGE_MAP
        END_MESSAGE_MAP

  2 消息映射机制的实现
   2.1 数据结构
    struct AFX_MSGMAP_ENTRY (静态数组每个元素的类型)
    {
	UINT nMessage;   // 消息ID
	UINT nCode;      // 通知码
	UINT nID;        // 命令ID或控件ID
	UINT nLastID;    // 最后一个控件ID
	UINT nSig;       // 消息处理函数的类型（确定用联合体哪个成员）
	AFX_PMSG pfn;    // 消息处理函数的指针（地址）
    };

    struct AFX_MSGMAP (静态变量的数据类型)
    {
	const AFX_MSGMAP* pBaseMap;
         //保存父类静态变量地址（负责连接链表）
	const AFX_MSGMAP_ENTRY* lpEntries;
         //保存相应类的静态数组首地址
    };
   2.2 宏展开的代码
      见代码
   2.3 宏展开各部分的作用
      _messageEntries[] - 静态数组
         数组中每个元素保存的为消息ID和处理这个消息函数的对应关系
      messageMap - 静态变量
         保存父类静态变量地址（负责连接链表）
         保存相应类的静态数组首地址
      GetMessageMap() - 虚函数
         获取本类静态变量地址（获取链表头节点）
   2.4 消息映射机制的处理过程
      1）当消息出现调用窗口处理函数（AfxWndProc）
      2）获取和hWnd绑定在一起的框架类对象地址pFrame
      3）利用pFrame调用虚函数GetMessageMap()获取本类
         静态变量地址（链表头节点 pMessageMap）
      4）利用pMessageMap的第二个成员获取相应类的静态数组首地址，
         到数组中匹配每个元素，一旦找到执行6，没有找到执行5
      5）利用pMessageMap的第一个成员获取父类静态变量地址如果为
         NULL结束查找，如果不为NULL执行4
      6）利用找到的静态数组元素的最后一个成员（函数地址），并调用
         之，完成消息的处理。
二 MFC消息的分类
  1 windows的标准消息（例如：键盘/鼠标/定时器...）
    ON_WM_XXX
  2 自定义消息
    #define WM_MYMESSAGE WM_USER+n
    ON_MESSAGE
  3 命令消息（WM_COMMAND）
    ON_COMMAND
  4 通知消息
    ON_通知码
    例如：ON_EN_CHANGE











