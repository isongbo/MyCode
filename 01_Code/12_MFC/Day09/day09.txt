一 MFC的文件操作
   1 相关类
   CFile类-主要封装了文件句柄和操作文件的API。
   CFileFind类-主要提供了文件查找的功能。
   2 CFile类的使用
   2.1 打开或者新建文件
   CFile::Open
   2.2 文件读写
   CFile::Read/Write
   2.3 关闭文件
   CFile::Close
   注意的问题：1> 读写操作一般放到异常处理结构中
   2> 读写时，还需注意文件的指针位置
   2.4 设置文件指针位置
   CFile::Seek()
   CFile::SeekToBegin
   CFile::SeekToEnd
   2.5 获取和设置文件属性
   CFile::GetStatus/SetStatus
   3 CFileFind类的使用
   3.1 开始查找
   CFileFind::FindFile
   3.2 查找下一个(得到当前文件信息，
                  返回值表示下一个文件是否存在)
   CFileFind::FindNextFile
   3.3 获取和判断文件的信息
   CFileFind::GetXXX
   CFileFind::IsXXX
   3.4 结束查找
   CFileFind::Close
例子：1 查找C:\下的文件和文件夹，并在控制台打印
   2  查找C:\下所有的文件和文件夹
   2.1 使用递归
   2.2 排除.目录   
二 对象的序列化(串行化) 
  1 CArchive类，序列化的核心类，称为归档类。
   使用它代替CFile类的Read/Write，完成具体数据读写。
  2 CArchive类的使用
  2.1 打开或者新建文件
   CFile::Open
  2.2 文件读写
    2.2.1 定义CArchive对象
    2.2.2 数据读写
          >>  "读"
          <<  "写"
    2.2.3 关闭CArchive对象
          CArchive::Close       
  2.3 关闭文件
     CFile::Close  
  3 定义支持序列化的类
  3.1 派生自CObject类
  3.2 在类的定义添加声明宏
      在类的实现中添加实现宏
  3.3 重写CObject::Serialize()函数，在函数中，
      完成类的成员变量的序列化(读和写)。
  4 使用
  
  5 原理
  5.1 展开宏
   在动态创建宏的基础上，多了一个友元函数和一个
   全局变量。
  5.2 成员的作用
  5.2.1 operator>>- 友元函数,作用是读取对象。
  5.2.2 _init_CStudent-全局的变量，类型是
        AFX_CLASSINIT，作用是将当前类的运行时类型
        保存到应用程序的模块状态信息的链表中。
        在进入main()函数之前保存这个信息。
  struct AFX_CLASSINIT
  { 
     AFX_CLASSINIT(CRuntimeClass* pNewClass)
     { 
         AfxClassInit(pNewClass); 
         {
            	pModuleState->m_classList.AddHead(pNewClass);
         }
     } 
  };   
 5.3 写(存储)对象的过程
      
 5.4 读(加载)对象的过程 
             