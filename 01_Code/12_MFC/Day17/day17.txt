一 UDP通信
  1 UDP服务器
    1.1 创建socket
    1.2 绑定地址和端口
    1.3 数据收发
    1.4 关闭socket
      
  2 UDP客户端
    2.1 创建socket
    2.2 数据收发
    2.3 关闭socket
二 使用MFC的类完成简单的文件传输功能
  1 相关类
  CAsyncSocket类-异步socket类。
  CSocket类-继承自CAsyncSocket类的同步socket类。 
  #include <afxsock.h>
  2 使用
  2.1 服务器端添加CServerSocket类

  2.2 客户端添加CClientSocket类
三 FeiQ
1 功能分析
  用户上线、用户下线、信息收发、文件收发和掉线检测。
2 分析用户上线流程
CMainFrame::OnCreate()
{
  Initialize( );
  {
     //1 初始化UDP服务器 
     m_UserServer.InitServer( );
     {
        // 创建服务器socket，绑定，并启动子线程接收客户端
         发送的数据。线程函数如下：
        UINT UserThread( LPVOID pParam )
        {
           while(1)
           {
              recvfrom(...);
              switch( packet.header.nCmdID )
              {
                 case NETCMDID_USERBROADCAST:
                      pThis->OnUserBroadcast(...);
                      {
                         m_pUserView->AddUser(...);
                         m_pChatView->AddUser( pszIP );
                      }
                      break;
                 ...  
              }
           }
        }
     }
     //2 初始化UDP客户端
     m_UserClient.InitClient( );
     {
        //2.1 创建客户端套接字
        //2.2 设置为广播模式，函数setsockopt(...);
     }
     // 3 发送广播消息
     m_UserClient.Broadcast( );
     {
        SendData(...);
        {
          addr.sin_addr.S_un.S_addr = 
            htonl( INADDR_BROADCAST );//广播地址
          sendto(...);
        } 
     }
  }
}     
3 掉线检测(通过发送心跳数据)
3.1 客户端每10秒发送一次广播，每个服务器收到广播数据后，
    调用AddUser()函数，在函数中，将列表的每个选项的附加 
    数据值设为1.
3.2 服务器端的CUserView也启动定时器，每20秒执行一次。
    判断每个选项附加数据的值，如果值为1，则设置为0；
    如果为0，则删除。
正常情况：1 0 1 0 1 0 1 0 1 0 1 0...
掉线情况：1 0 1 0 1 0 1 0 1 0 1 0 0
 
      
    
  





    
   