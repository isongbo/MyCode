一.this 指针 
     1.1 什么是this指针
          指向当前对象的指针   
                 在构造函数中 this 代表正在被构建的对象的地址
                 在成员函数中 this 代表调用这个函数的对象的地址
     1.2 举例
     
     1.3 this 指针的应用 
     可以用来区分 参数名 和 成员变量名 重名的问题
     this指针可以作为函数的参数 或者参数的值相关 
     this指针可以作为函数的返回值 或者 返回值相关 
二. const 对象和 const函数   
     2.1 概念
     加了const修饰的对象 就是const对象
     加了const修饰的成员函数 叫const函数 
     2.2 const 对象 和 const函数的关系
     const对象 只能调用const函数 
     非const对象 优先调用非const函数  如果没有非const
            函数 则调用const函数 
     const函数 和 非const 函数 可以形成重载关系 
     2.3 const 函数 和 成员的关系
     const函数 只能对成员变量进行读操作  不能进行写操作
     const函数只能调用const函数  
     2.4 如果非要在const函数中对成员变量进行修改
           则使用mutable 修饰这个成员变量 
                
 三.析构函数
      3.1 概念
      一个特殊的函数  函数名和类型名相同 但在函数名
             前有一个~
      析构函数没有返回值类型 也没有参数 所以一个类
             只有一个析构函数
      在对象销毁之前自动调用一次  当然也可以手动调用但
             一般不这么做
      3.2 什么时候 需要自定义析构函数
      当对象销毁之前 需要释放一些资源的时候
      当有指针类型的成员 并且 分配堆内存  
             对象销毁之前需要 释放堆内存  
      3.3  自定义析构函数的 举例
           定义一个可以动态分配内存  和 动态申请内存
           最后可以自动释放内存的数组。
  四.new  delete 比malloc free 多做了哪些事
       4.1 new 比 malloc 多做了三件事
       自动的类型转换 
       自动构建类类型的成员
       自动调用构造函数 
                   
       4.2  delete  比 free  多做了哪些事?  
       多调了一次析构函数 
  五.拷贝构造函数 
      5.1 概念
      以拷贝的形式  来构建对象的函数  
      class  A{
            public:
            A(){

            }
            /* 拷贝构造函数  */
            A(const  A&  a){

            }   
      };          
     5.2  默认的拷贝构造 
           一个类型中 如果没有提供拷贝构造函数  则编译器会
                  自动提供一个默认的拷贝构造函数。这个默认的
                  拷贝构造函数 会逐字节复制对象的数据(浅拷贝)
     5.3 自定义拷贝构造函数 完成深拷贝
                           
     5.4  拷贝构造函数触发的时机 
           当使用一个存在的对象  去创建另外一个对象时 
           当把一个对象 传给一个值类型的参数  
           函数中 返回一个值类型的对象  
六.静态成员
    6.1 静态成员函数 
    这是一类特殊的函数   这类函数不需要对象 就可以通过
           类型名直接调用。
    静态函数中 不能直接访问普通的成员,只能直接访问
           静态成员。
    6.2 静态成员变量 
    加了static 修饰的成员变量  也是可以不通过对象就能
           直接访问的变量,但要注意访问权限的问题。
    这些变量 属于类型级别的 不是对象级别的。
    静态成员变量 必须在类外进行初始化。
           静态成员变量类型  类名::成员变量名;   
           静态成员变量类型  类名::成员变量名=值;  





     


   