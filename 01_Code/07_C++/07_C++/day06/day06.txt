一.运算符重载的限制
    1.1 不是所有的运算符 都能重载
    .    成员访问运算符
    .*  成员指针解引用运算符
    ::   作用域运算符
    sizeof  求类型或者对象大小的运算符
    ?  :   三目运算符
    typeid  可以获取类型信息的运算符
    1.2  不能发明新的运算符重载 只能对已有的运算符重载
         $    
         a**b  
    1.3 不能对基本类型进行运算符重载  重载中至少有一个是
              类类型    
          int  a=1;
          int  b=2;
          a+b
    1.4  不要改变运算符的运算特性 
          比如把 二元的运算符 重载成一元的   %
          加法 写成 减法的逻辑 
    1.5  有些运算符 只能以成员形式进行重载
          （能以成员形式重载 就以成员形式重载 不能就写全局
             形式）
二.只能以成员形式重载的运算符
     2.1 赋值运算符 和 [] 
           =   最好以成员形式的如 += -=  /=
                 如果不给一个类型 提供运算符 则编译器默认提供
                 一个运算符函数,这个函数的功能和默认拷贝构造
                 函数做的事情 几乎相同 也是逐字节复制 只不过
                 触发时机不相同。
                 默认的赋值运算符 不但会引起内存重复释放 还会
                        引起内存泄露。   
           []   下标取值运算符  arr[ind]
     2.2 () 运算符
           支持函数对象  可以像函数一样去使用的对象 
           支持类型转换  把当前对象类型转换成希望的类型
           
           类型转换:          
                  可以把一个类型转换成当前对象类型 单参构造机制
                         防止单参隐式转换可以使用 explicit
                  把当前对象类型 转成希望的类型  ()
                  operator 转换成的类型 (){   }          
     2.3 ->   和  *  
          重载 -> 和 *  一般来说就是要把一个不是指针的类型 
                 伪装成指针类型来操作。
          智能指针的实现原理?
                 使用一个栈对象 来管理堆对象 
            
三.new delete  运算符的重载
    void*   operator new(size_t  size);
    void     operator delete(void* ptr);   
  
    void*   operator new[](size_t  size);
    void     operator delete[](void* ptr);    
四.面向对象的三大特征
    封装 
    继承
    多态
 
五.封装  
    5.1 概念
    改公开的数据 就public   该隐藏细节的数据就private
    5.2 作用 
    便于分工 和 协同开发
    防止不必要的扩展 
    5.3 举例
    char*    encode(char* msg,int key);
    char*    decode(char* msg,int key);
    
    电视机扩展的例子 
    5.4 实现
    private       public 

六.继承 
    6.1 继承
    继承实际是 是一种传承   这里涉及到两个类 
           一个类叫父类（基类）  另一个类叫子类(派生类)
           子类会传承父类的代码 和 数据 。除了传承父类的
           数据 还可以对父类进行扩展。
     6.2 作用
     代码复用 
     扩展父类功能 
     6.3 语法
     class   Parent{    };
     class   Child:public Parent{       };     
 
                       Animal         

    Cat            Dog              Fish 
  
    子类  is  a  父类     继承是一个is  a 关系 
     Cat  is  a  Animal
     Fish is  a  Animal      
   6.4  is   a  VS   has  a
     has  a  是一种组合关系 和 包含关系 
     收音机      Radio    
     汽车         Car
   
     Car   has  a  Radio 



 指针  和 引用的联系 和 区别
 联系:
       引用的底层是用指针来实现的
              类型 *const 指针名;
       引用实现了 很多指针所实现的功能 
              指针类型的参数 ----引用实现
              指针类型的返回值 ----引用实现
 区别:
        1.引用定义时 必须进行初始化  
           指针不是必须的 但尽量初始化
        2.引用一旦初始化 之后  引用的生命期内就不能
           改变引用的对象  指针可以改变指向 
        3.指针是一个实体变量  大小永远是 4
           引用是一个别名   求大小时 是对应的类型或者对象大小
           不要把引用的本质 和 引用的实现混淆      
        4.有指针的指针  但没有引用的引用
           int**
           int&&  // error
        5.没有引用的指针  但有指针的引用 
           int&*  //error
           int*&   相当于 int**       
        6.有指针的数组   但没有 引用的数组
           int   a=10;
           int   b=20;
           int   c=50;
           int*  data[3]={&a,&b,&c};
           int& data2[3]={a,b,c};  //error
           int    data3[3]={a,b,c}; 
         7.但有数组的引用 
           int   data[3];        int   (&rdata)[3];
           int   data2[4];      int   (&rd)[4];   


  

   
      


















  