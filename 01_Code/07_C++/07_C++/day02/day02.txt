一.重载
     1.1 函数重载的原理
     c语言 在底层生成函数调用名时 只参靠函数名
     c++语言 在底层生成调用函数名 不单要考虑函数名
            还要考虑参数列表。
     1.2 函数重载引入的问题 以及如何解决
     跨编译器调用问题

     extern "C"  告诉编译器 按照c语言生成函数调用名的
            规则来生成调用名。
二.函数参数的哑元
    2.1 概念
    如果一个函数的参数 只有参数类型 没有参数名字 则
          这个参数称之为哑元。
    2.2 哑元的作用 
         2.2.1. 让无参参数列表严格匹配
         让参数列表形式上  严格匹配 无参的参数的参数不能传入参数
          void  show(void);
         2.2.2 保持函数向前兼容
         char*   encode(const char* data,int key);
         char*   decode(const char* data,int key);
         /* 之后的代码  */
         char*   encode(const char* data,int key);
         char*   decode(const char* data,int);
         2.2.3  用来区分函数 
         Date   date;
         ++date;
         date++;
三.函数参数的默认值 
    3.1 概念
    在定义或者声明函数 时 可以给函数的参数指定一个默认
          的值,当调用这个函数的时候 不传入实参 则使用默认
          值 如果传入实参 则替代掉默认值。
    3.2 函数参数默认值注意的问题
          参数的默认 必须保持靠右原则
                getmax(int x=1,int y=0); 
          参数的默认值 不要和函数重载 形成冲突 
         
          当函数的声明 和 实现 分离时  函数参数的默认值 
                 需要在声明中指定 实现中不能再指定。  
    3.3  写一个打印整数数组的函数
           要求默认输出 这个数组的第一个元素  默认的分割符
                  是逗号 可以指定输出的元素个数 和 分割符。
                  
四.内联函数   inline 
    4.1 宏函数  (带参宏)
     写一个宏 实现两个整数最大值的选取 
     
    4.2 写一个函数 完成两个整数最大值的选取
        
    4.3 内联函数
    inline   getmax(int x,int y);
    在编译时 请求编译器把函数的二进制代码 复制到
           调用位置,如果请求成功 就省了函数 开栈 压栈 和
           清理栈的系统开销 从而提高执行效率。如果请求
           不成功  就成为普通函数调用。
    4.4 内联函数的注意事项
          小函数  频繁调用 适合内联 
          大函数 稀少调用  不适合内联 
          递归函数 无法实现内联 
          理解 内联只是个请求 可能成功 也可能失败    
 五.c++ 中的动态内存分配 
      5.1  分配单个变量对应的堆内存
      new   
      类型  *指针名=new   类型;
      类型  *指针名=new   类型(); 
      类型  *指针名=new   类型(值); 

      申请完毕之后 使用指针操作对应的内存 
 
      /* 释放堆内存  */
      delete   指针名;  
      5.2  申请多个变量对应的空间  new[]   delete[]
      类型 *指针名=new 类型[n];
      使用指针名 来操作这块堆空间 
      释放new[]   对应的内存 需要使用 delete[]
      delete[]   指针名;
       
      5.3  定位内存分配   (了解)
      char   data[100];
      int     *parr2=new (data)int[25];
  
      data 和  parr2  是同一个地址 
      parr2  指向的内存 不用手工(delete[] )释放  
六.引用
     6.1  什么是引用 
     引用就是一个别名 
     9527    华安    唐伯虎    唐寅 
     机器猫   小叮当    多啦A梦
     6.2  语法
     类型       变量名=值;
     /* 定义引用时  引用必须初始化 */
     类型&    引用名=变量名;
     引用初始化之后 在引用的生命期内 不能引用其它对象 
     
     6.3 引用的应用 
          6.3.1 引用类型的参数
          值传递 
          引用传递  
          6.3.2 引用类型的返回值 
          函数的返回值 一般来说只能做右值 不能做左值
          除非你返回 指针类型 或者引用类型 
          不要返回 局部变量的引用
                 可以返回 全局  引用型参数 堆空间数据 static
                 类型的数据  
          6.3.3 const引用
          const int&  ri=10;
          对引用类型的参数  如果在函数内部不需要对参数进行
                 修改 则需要在这个参数上加const  以增强函数的
                 兼容性。
   6.4 引用是如何实现的?
         引用的底层是用 指针实现的
         int   x=100;
         const  int *px=&x;
         int  const *pxx=&x;
         int   y=200;

   6.5 列出指针 和 引用的联系 和区别？
        

