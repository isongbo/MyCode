一.c++ 简介
    80年代  贝尔实验室   本贾尼
    83年正式命名为 c++
    87GNU 制定了c++ 标准
    92年微软  IBM  制定了c++ 标准
    98年 ANSI  和 ISO 制定了c++ 标准  c++98
    03年 ISO 推出了修订版  c++03
    11年 ISO  推出新的标准   c++0x

    g++  ***.cpp   -std=c++0x 
二.c++ 和 c语言的关系
    c是c++建立的基础  c++包含整个c
    c++ 和 c 又有不同之处
          c++ 对类型检查更加严格 
          c++ 扩展了c
               c++采用面向对象编程 (以类的方式来组织代码)
               支持运算符重载 (一种函数的特殊表现形式)
               c++支持异常  (一种新的错误表现和处理形式)
               c++支持模板和泛型编程 (类型通用编程)
三.第一个c++ 程序
    3.1 源文件 
    可以以 .c  .C  .cxx  .c++ .cpp  结尾
    推荐以.cpp  结尾 
    3.2 头文件
    标准c++ 头文件:  
    #include <iostream>
    #include <string>
    这个头文件是标准的c++ 头文件 位置在:
    /usr/include/c++/4.6 

    c++程序使用标准c的头文件:  去尾加头 
    #include<string.h> -----    #include<cstring>
    #include <time.h>  -----    #include <ctime>

    c++程序使用系统c的头文件: 原样导入
    #include <unistd.h>
    #include <pthread.h>
    c++程序中使用自定义的头文件:
    #include "data.h"
     
    3.3  输入 输出  (库函数的使用)
    int    age;
    cin >> age;
    cout << age << endl;
    c++中对类型的格式 是自动识别的 
    库函数的使用:
    在c++ 中使用c的库函数 和 c程序没有什么区分
    scanf("%d",&age);
    printf("%d",age);    

    3.4  编译器 
    c++ 程序 推荐使用 g++ 编译器
    但可以使用gcc编译器  但需要使用链接库 stdc++
    gcc   hello.cpp   -lstdc++
    
    g++ 的编译选项 和 gcc几乎一摸一样:
    -c    -l     -L   -I   -E   -S   -o  -O    
   
  3.5  using namespace std;
     使用标准命名空间 std 

四.命名空间 
    4.1 概念
    把一组逻辑相关的  类型 变量  函数 等组织到一起的一个
           逻辑结构。
    4.2 作用:
    便于逻辑上划分模块
    可以避免命名冲突 
    4.3 语法
    namespace   空间名{
             /* 类型 
              变量
              函数 */
              void  show();
    }
    4.4 举例 
    
    4.5 如何使用 命名空间中的数据
         4.5.1 在数据前 加命名空间名::

         4.5.2  使用using 声明的方式
         using   空间名::数据名;
         如果引入冲突  则 使用第一种解决
         4.5.3  使用using namespace 指令 
         using  namespace std;  
         如果引入冲突 则使用第一种解决 
    4.6 命名空间嵌套
         namespace ns1{
                  // 变量  类型   函数
                  namespace ns2{
                            
                  } 
         }
        /* 命名空间重命名 */
        namespace  ns4=ns1::ns2::ns3;
    4.7   特殊的命名空间 ------ 无名命名空间
         4.7.1 概念
         如果一个数据 没有定义在任何一个命名空间中  则这些
                数据属于无名命名空间。
         namespace {

         } 
        4.7.2 举例
          
五.c++ 中的结构 联合  枚举
    5.1 结构体 
    和c的相同点:定义的语法 完全和c相同
    不同点:
           表达结构体类型时  可以省略struct关键字
           没有定义任何成员的结构体 c语言中大小是0 c++中是1
           c++中结构体中 可以定义函数(成员函数)
    5.2 联合体
     和c的相同点:定义的语法 和c完全相同
     不同点:
           表达类型时 可以省略关键字 union
           c++ 中支持匿名联合
    5.3 枚举
    相同点:定义的语法和c语言完全相同
    不同点:
           表达枚举类型时 可以省略关键字 enum
           枚举在c++ 会单独处理成一个类型,所以不在支持
                  把一个整数赋值给一个枚举变量 这里体现了
                  c++ 的类型严格。
六.c++ 中的bool类型
    c语言中使用bool类型 需要导入一个头文件
            #include <stdbool.h>
    c++ 天生就支持bool类型  取值依然是 true  false 
          但bool类型的变量 可以赋任何值  但只有四个值表示假
          0   '\0'   NULL  false 
    bool  类型的变量 可以直接用来判断 不用再组成比较表达式
    bool 类型如果和整数做运算
         则true代表1  假代表0      
七.c++中运算符 转换 (了解)
    &&         and
    {              <%
    #              %:
    &             bitand   

八.c++ 中的函数  和 c语言中区别 
    8.1 c++ 中的函数 对无参列表 严格匹配  
          参数列表中如果没有参数 则代表这个函数无参 
          void  类型的参数 依然可用 
          void   show(void);
    8.2 c++ 不再支持c语言中隐式声明规则 
          函数调用之前必须 声明或者定义 
    8.3 c++ 中函数必须指定返回值类型  不再默认返回int
          main函数除外 
九.函数重载   overload 
    9.1 概念
    在同一作用域中  函数名相同 参数列表不同的函数 可以
           构成重载关系。
    参数列表不同:参数的个数  参数的类型  参数的顺序
           getmax(int x,double y);
           getmax(double x,int y);
    9.2 举例
             
    9.3 使用函数指针 调用重载的函数
    



    



  


      







 




  
   









   



 