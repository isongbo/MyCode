一、类型的决定性
通过一个指针或者引用访问类的成员，编译器只是根据指针或者引用的类型决定是否可以访问该成员，而与此指针或者引用的实际目标对象无关。
二、虚函数与多态
如果将基类中的某个成员函数声明为虚函数(在其返回类型前面加上virtual关键字)，那么其子类中的同型函数就也是虚函数(无论其是否带有virtual关键字)，而且和基类版本形成覆盖关系。这时通过一个指向子类对象的基类指针，或者引用子类对象的基类引用，调用该虚函数，实际被执行的将是子类中的覆盖版本，而非基类的原始版本。这种现象谓之多态。
三、重载、隐藏和覆盖
重载必须在同一个作用域中。
覆盖必须是同型的虚函数。
如果不是重载也不是覆盖，而且函数名还一样，那就一定是隐藏。
四、有效覆盖的前提条件
1.只有类的非静态成员函数才能被声明为虚函数，全局函数和类的静态成员函数都不能是虚函数。
2.只有在基类中被声明为虚函数的成员函数才能在子类中覆盖。
3.虚函数在子类中的覆盖版本必须和该函数的基类版本拥有完全相同的签名，即函数名、形参表、常属性严格一致。
4.如果基类中虚函数的返回类型为基本类型或类类型的对象，那么子类的覆盖版本必须返回相同的类型。
5.如果基类中的虚函数返回类类型的指针或引用，那么该函数在子类中的覆盖版本可以返回其基类版本返回类型的公有子类的指针或引用——类型协变。
6.子类中覆盖版本不能比基类版本说明抛出更多的异常。
7.无论基类中的虚函数位于该类的公有、私有还是保护部分，该函数在子类中的覆盖版本都可以出现在任何访控区域。
class Base {
  virtual void foo (void); // 1
  virtual void foo (void) const; // 2
};
class Derived : public Base {
  virtual void foo (void); // 3
  virtual char foo (void) const; // 4
};
1和2构成重载
3和4构成重载
3隐藏了2，覆盖了1
4隐藏了1，在试图覆盖2时出错
五、多态的条件
多态性除了需要在子类和基类间形成有效的虚函数覆盖以外，还必须通过指针或者引用访问该虚函数。
当基类的构造函数被子类的构造函数调用时，子类对象尚不能说是子类类型的，它只表现出基类类型的外观和行为。这时调用虚函数，只能被绑定到基类版本，没有多态性。
当基类的析构函数被子类的析构函数调用时，子类对象已不再是子类类型的了，它只表现出基类类型的外观和行为。这时调用虚函数，只能被绑定到基类版本，没有多态性。
六、纯虚函数、抽象类、纯抽象类
1.形如virtual 返回类型 函数名 (形参表) [const] = 0;的虚函数成为纯虚函数。
2.至少包含一个纯虚函数的类就叫抽象类，抽象类不能实例化为对象。
3.如果一个抽象类的子类没有覆盖其基类中的全部纯虚函数，那么该子类就也是抽象类。
4.除了构造、析构和静态成员函数以外的全部成员函数都为纯虚函数的抽象类就叫做纯抽象类，亦称接口类。
七、虚函数表和动态绑定
1.对于包含虚函数的类，编译器会为其生成一张虚函数表，即存放每个虚函数地址的函数指针数组，简称虚表(vtbl)，每个虚函数对应一个虚函数表的索引号。
2.当编译器看到通过指针或引用调用虚函数时，并不急于生成有关函数调用的指令，相反它会用一段代码替代该调用语句，这段代码在运行时执行，完成如下操作：
1)确定调用者指针或引用的目标对象，并从中获取到虚表指针；
2)根据所调用函数的索引号从虚表中提取相应的函数地址；
3)根据函数地址调用该虚函数。
这个过程因为是在运行时完成的，所以称为动态绑定。
3.动态绑定对性能的影响
1)虚函数表本身会增加内存空间的开销；
2)虚函数调用的时间开销会大于普通函数；
3)虚函数不能内联。
建议只有在确实需要多态性的场合才使用虚函数，否则尽量避免使用虚函数。
八、运行时类型信息(RTTI)
1.动态类型转换(dynamic_cast)
动态类型转换应用在具有多态继承关系的父子类的指针或引用之间。在运行期间检查转换源的目标对象的类型与转换目的类型是否一致，如果一致则返回实际的对象指针或引用，否则返回空指针或抛出异常。
2.typeid运算符
在运行期间动态获取对象的类型信息。
九、虚析构函数
如果将基类的析构函数声明为虚函数，那么子类的析构函数就也是虚函数，而且对基类版本构成覆盖。这时delete一个指向子类对象的基类指针，实际被执行的是子类的析构函数，该函数在释放完成子类特有的资源以后，会自动调用基类的析构函数，完成对基类资源的释放，最终释放掉所有的资源，没有内存泄漏。
十、虚与非虚
1.可以被声明为虚函数的函数
普通成员函数
成员函数形式的操作符函数
析构函数
2.不能被声明为虚函数的函数
静态成员函数
全局函数形式的操作符函数
构造函数
全局函数