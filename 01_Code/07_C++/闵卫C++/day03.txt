一、引用
1.引用的基本特性
1)引用即别名
声明一个标识符为引用，即表示该标识符可作为另一个有名或无名对象的别名。
int a = 10;
int& b = a; // b是a的一个引用，即b是a的一
                    // 个别名
++b;
cout << a << endl; // 11
int& c = b; // c是a的另一个引用
++c;
cout << a << endl; // 12
常引用的目标不可修改，只能读取。
int const& d = c;
++d; // ERROR
在C++中，无名对象（字面值常量、临时变量）都被视作右值，只能通过常引用引用之。
int const& a = 10; // 纯右值
int const& a = x + y; // 将亡右值
2)引用必须初始化
int a = 10;
int a;
int* p = NULL;
int* p;
int& r; // ERROR
int& r = a;
3)无法定义一个什么都不引用的引用。 
int* p = NULL; // 什么都不指向的指针
int& r = NULL; // ERROR
4)引用一经初始化便不能再引用其它对象。
int a;
int& r = a;
int b;
r = b; // b -> a
2.引用型参数
1)函数的形参是实参的别名
可以将函数的形参声明为引用形式，该形参在参数传递过程中由对应的实参初始化，并成为该实参的别名。
2)在函数中修改实参的值
通过引用型形参，可以在函数体内部修改调用者实参的值，成为除返回值和指针参数以外，第三种由函数内部向函数外部输出数据的途径。
3)避免对象复制的开销
通过引用传递参数，形参只是实参的别名而非其副本，这就避免了从实参到形参的对象复制，这对于具有复杂数据结构的参数而言可以提高其传参的性能。
如果函数只是读取引用型参数的目标对象，那么最好通过常引用接收实参，防止在函数中意外地修改实参变量的值。
3.引用型返回值
foo () = 10;
++foo ();
1)返回左值
2)函数的局部变量只具有函数级甚至块或语句级的生命周期，函数一旦返回，所有的局部变量即刻销毁，即使通过返回值获得了对它们的引用，其目标也将是未定义的。因此不要从函数中返回对局部变量的引用，而返回全局、静态、成员、堆变量的引用是安全的。
int* foo (void) {
    int a = 10;
    ...
    return &a;
}
printf ("%d\n", *foo ());
int b = 20;
int c = b + *foo ();
4.虽然引用是通过指针实现的，但是在高级语言层面引用和指针还是具有若干不同的特性
1)指针可以不初始化，其目标可以在初始化后随意变更；但是引用必须初始化，而且一旦初始化就无法变更其目标
int x = 10, y = 20;
int* p; // p没有初始化
p = &x; // p指向x
p = &y; // p指向y
--------------------
int x = 10, y = 20;
int& r = x; // r必须初始化
r = y; // r引用不了y
2)可以定义空指针，即什么也不指向的指针，但是不能定义空引用，引用必须有所引用，否则引用将失去意义。
int* p = NULL;
int& r = NULL; // ERROR
3)可以定义指向指针的指针，但是无法定义引用引用的引用。
int x = 10;
int* p = &x; // 一级指针
int** pp = &p; // 二级指针
                          // 指向指针的指针
------------------
int x = 10;
int& r = x;
int&& rr = r; // ERROR
C++2011中类似“int&&”的类型是合法的，但是它表示右值引用，而非二级引用。
4)可以定义引用指针的引用，但是无法定义指向引用的指针。
int x = 10;
int* p = &x;
int*& q = p; // q是p的别名
cout << *q << endl; // 10
----------------
int x = 10;
int& r = x;
int&* s = &r; // ERROR
int* s = &r; // OK
5)可以定义存放指针的数组，但是无法定义存放引用的数组。可以定义引用数组的引用。
int a = 10, b = 20, c = 30;
int* p[3] = {&a, &b, &c}; // 指针数组
-----------------
int a = 10, b = 20, c = 30;
int& r[3] = {a, b, c}; // ERROR
-----------------
int a[3] = {10, 20, 30};
int (&r)[3] = a; // 数组引用
cout << r[0] << endl; // 10
r[1]++;
cout << a[1] << endl; // 21
5.函数指针和函数引用
int x = 10;
int* p = &x;
int& r = x;
*p = 20;
r = 20;
----------------------------
int func (double); // 函数
int (*pfunc) (double) = &func; //函数指针
int (&rfunc) (double) = func; //函数引用
(*pfunc) (3.14);
rfunc (3.14);
二、显式(强制)类型转换
1.C风格的显式类型转换
(目标类型)源类型变量
int i = 1234;
char c = (char)i;
2.C++风格的显示类型转换
1)静态类型转换
static_cast<目标类型> (源类型变量)
编译器会对源类型和目标类型做相容性检查，检查不通过报错。
A.如果在源类型和目标类型之间，至少有一个方向可以做隐式类型转换，那么这两个类型就是相容类型。
short x = 10;
void* v = &x;
short* p = static_cast<short*> (v);
--------------------
short x = 10;
short* v = &x;
int* p = static_cast<int*> (v); // ERROR
B.如果从源类型到目标类型存在自定义的转换规则(类型转换构造函数/类型转换运算符函数)，那么它们也可以被称为相容类型。
2)动态类型转换
dynamic_cast<目标类型> (源类型变量)
用于具有多态性的父子类型的指针或引用。
3)去常类型转换
const_cast<目标类型> (源类型变量)
去除指针或引用的常属性。
int x = 10;
int const* cp = &x;
int* p = const_cast<int*> (cp);
char* q = const_cast<char*> (cp); // 错误
char* q = (char*)cp; // OK，风险
4)重解释类型转换
reinterpret_cast<目标类型> (源类型变量)
转换任意类型的指针或引用。
在任意类型的指针和整型之间转换。
三、面向对象
1.为什么要面向对象
1)相比于分而治之的结构程序设计，强调大处着眼的面向对象程序设计思想，更适合于开发大型软件。
2)得益于数据抽象、代码复用等面向对象的固有技术，软件开发的效率获得极大的提升，成本却大幅降低。
3)面向对象技术在数据库、网络通信、图形界面等领域的广泛应用，已催生出各种设计模式和应用框架。
4)面向对象已经成为现代计算机程序设计语言的发展潮流，不但几乎所有新诞生的语言都是面向对象的，而且很多传统的结构化语言也在不断地引入面向对象的机制。
2.什么是面向对象
1)万物皆对象。
2)把大型软件看成一个由对象组成的社会。
3)对象拥有足够的智能，能够理解来自其它对象的信息，并以适当的方式作出反应。
4)对象能够从高层对象继承某些特性，并允许低层对象从自己继承某些特性。
5)编写程序的过程就是一个描述对象的过程，最终是问题域和解域获得完美的统一。
6)面向对象的四大要素：封装、继承、多态、抽象。






































